/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var aoiFC = ee.FeatureCollection("projects/ee-tfmt/assets/aoi/finalAoi"),
    aoiFV = ui.Map.FeatureViewLayer("projects/ee-tfmt/assets/aoi/finalAoiFV", null, "finalAoiFV"),
    aoiSub1FC = ee.FeatureCollection("projects/ee-tfmt/assets/ESMR504/2021_03_19_Bulahdelah/2021_03_19_Bulahdelah_aoi"),
    aoiSub1FV = ui.Map.FeatureViewLayer("projects/ee-tfmt/assets/ESMR504/2021_03_19_Bulahdelah/2021_03_19_Bulahdelah_aoiFV", null, "2021_03_19_Bulahdelah_aoiFV"),
    aoiSub2FC = ee.FeatureCollection("projects/ee-tfmt/assets/ESMR504/2021_03_19_Maitland/2021_03_19_Maitland_aoi"),
    aoiSub2FV = ui.Map.FeatureViewLayer("projects/ee-tfmt/assets/ESMR504/2021_03_19_Maitland/2021_03_19_Maitland_aoiFV", null, "2021_03_19_Maitland_aoiFV"),
    aoiSub3FC = ee.FeatureCollection("projects/ee-tfmt/assets/ESMR504/2021_03_24_Grafton/2021_03_24_Grafton_aoi"),
    aoiSub3FV = ui.Map.FeatureViewLayer("projects/ee-tfmt/assets/ESMR504/2021_03_24_Grafton/2021_03_24_Grafton_aoiFV", null, "2021_03_24_Grafton_aoiFV"),
    s1 = ee.ImageCollection("COPERNICUS/S1_GRD"),
    trainingSamplesMaitland = ee.FeatureCollection("users/paulhosch/123"),
    DEM = ee.Image("AU/GA/DEM_1SEC/v10/DEM-H"),
    DEA_WOS_waterOver30 = ee.FeatureCollection("projects/ee-tfmt/assets/datasets/DEA_WOS_waterOver30"),
    DEA_WOS_waterOver30FV = ui.Map.FeatureViewLayer("projects/ee-tfmt/assets/datasets/DEA_WOS_waterOver30FV", null, "DEA_WOS_waterOver30FV"),
    Bulahdelah_2021_03_19_trainingSampleCollection = ee.FeatureCollection("projects/ee-tfmt/assets/ESMR504/2021_03_19_Bulahdelah/2021_03_19_Bulahdelah_trainingSampleCollection"),
    Bulahdelah_2021_03_19_trainingSampleCollectionFV = ui.Map.FeatureViewLayer("projects/ee-tfmt/assets/ESMR504/2021_03_19_Bulahdelah/2021_03_19_Bulahdelah_trainingSampleCollectionFV", null, "2021_03_19_Bulahdelah_trainingSampleCollectionFV"),
    Bulahdelah_2021_03_19_floodedAreaFV = ui.Map.FeatureViewLayer("projects/ee-tfmt/assets/ESMR504/2021_03_19_Bulahdelah/2021_03_19_Bulahdelah_floodedAreaFV", null, "2021_03_19_Bulahdelah_floodedAreaFV"),
    Maitland_2021_03_19_floodedAreaFV = ui.Map.FeatureViewLayer("projects/ee-tfmt/assets/ESMR504/2021_03_19_Maitland/2021_03_19_Maitland_floodedAreaFV", null, "2021_03_19_Maitland_floodedAreaFV"),
    Maitland_2021_03_19_trainingSampleCollectionFV = ui.Map.FeatureViewLayer("projects/ee-tfmt/assets/ESMR504/2021_03_19_Maitland/2021_03_19_Maitland_trainingSampleCollectionFV", null, "2021_03_19_Maitland_trainingSampleCollectionFV"),
    Maitland_2021_03_19_trainingSampleCollection = ee.FeatureCollection("projects/ee-tfmt/assets/ESMR504/2021_03_19_Maitland/2021_03_19_Maitland_trainingSampleCollection"),
    Grafton_2021_03_24_floodedAreaFV = ui.Map.FeatureViewLayer("projects/ee-tfmt/assets/ESMR504/2021_03_24_Grafton/2021_03_24_Grafton_floodedAreaFV", null, "2021_03_24_Grafton_floodedAreaFV"),
    Grafton_2021_03_24_trainingSampleCollection = ee.FeatureCollection("projects/ee-tfmt/assets/ESMR504/2021_03_24_Grafton/2021_03_24_Grafton_trainingSampleCollection"),
    meritHydro = ee.Image("MERIT/Hydro/v1_0_1"),
    landCoverDEA = ee.ImageCollection("projects/geoscience-aus-cat/assets/ga_ls_landcover_class_cyear_2"),
    Maitland_2021_03_19_binary = ee.Image("projects/ee-tfmt/assets/ESMR504/2021_03_19_Maitland/2021_03_19_Maitland_binary"),
    Grafton_2021_03_24_binary = ee.Image("projects/ee-tfmt/assets/ESMR504/2021_03_24_Grafton/2021_03_24_Grafton_binary"),
    F_20210324 = /* color: #00ffff */ee.Geometry.MultiPoint(
        [[152.9367853459412, -29.696101380692433],
         [153.01475718696176, -29.601332106003547],
         [152.88450238608954, -29.630347476558313],
         [152.89959644315547, -29.68559127950946],
         [152.99526645625716, -29.61588215274094],
         [152.98511308315844, -29.61713961923801],
         [152.90121063773682, -29.697180483147367],
         [153.0025392500753, -29.627110169193518],
         [152.9214237428121, -29.70598274862687],
         [152.96732572905626, -29.635288160525533],
         [152.95430069487915, -29.701759979929253],
         [152.93615661269266, -29.63968929326529],
         [152.88971507522103, -29.628907186918063],
         [152.9147752231414, -29.666278912846987],
         [152.92573569353075, -29.598183980659815],
         [152.9104632724227, -29.705086469315123],
         [152.9844843499099, -29.607258251303577],
         [152.90839870863496, -29.709937971261272],
         [152.91962672508754, -29.70535401537833],
         [152.88621022179305, -29.602767936542758],
         [152.98196941691577, -29.60016382152754],
         [152.97532089724507, -29.678046480527033],
         [152.95196412592716, -29.71200253504902],
         [152.8970770510603, -29.58219810338321],
         [152.86033851748093, -29.62190193916309],
         [152.94549842939963, -29.628100089627385],
         [153.011524338698, -29.60932727419238],
         [152.9980489353145, -29.605822420764365],
         [152.9891574878139, -29.68352671572172],
         [152.91935917902433, -29.582644013488554],
         [152.938849909729, -29.6961905627135],
         [152.97065221844213, -29.642293408280505],
         [152.8948341232304, -29.59468358633286],
         [152.88926470601464, -29.600970918818213],
         [152.95232531311245, -29.622891859596958],
         [152.95232531311245, -29.68640283590118],
         [152.9973310200449, -29.607258251303577],
         [152.97568208443042, -29.62064447266602],
         [152.9111811876923, -29.661877780107233],
         [152.96858319555332, -29.62199112118416],
         [153.0099056850156, -29.61606051678308],
         [152.88755687031116, -29.662323690212578],
         [152.98484553709525, -29.709848789240205],
         [152.93669616392015, -29.645526256544247],
         [152.89663114095492, -29.583005200673885],
         [152.98502390113737, -29.679303947024096],
         [153.00883104166175, -29.613367219746795],
         [153.00981650299457, -29.618847454941484],
         [152.99643474073315, -29.609055269028115],
         [152.9783753814667, -29.61040191754626],
         [153.01386090765, -29.632233676303926],
         [152.9182800765694, -29.617411624402273],
         [152.95304322838206, -29.703017446426326],
         [152.98933585185605, -29.656308362891487],
         [152.91387894382964, -29.70571520256367],
         [152.897888607452, -29.696551749898834],
         [152.95511225127086, -29.695115919359615],
         [152.96005293523808, -29.688824127773202],
         [152.89474494120932, -29.5944115811686],
         [152.92420622186944, -29.694036816904685],
         [152.9883459314222, -29.62962510218766],
         [152.88118035580473, -29.663942343894977],
         [152.98277651420645, -29.618218721692944],
         [152.97918693785843, -29.646337812935975],
         [152.9111811876923, -29.710383881366617],
         [152.89941362001227, -29.65684791411895],
         [152.98924666983498, -29.681551333955042],
         [152.97091976450534, -29.679843498251568],
         [152.91208192610512, -29.673105796559813],
         [152.9578947303282, -29.690531963476676],
         [152.95744436112182, -29.644447154089313],
         [152.92277039133023, -29.624956423384706],
         [152.91576514357527, -29.712180899091152],
         [152.93893909175003, -29.63699153712795],
         [152.9525036771546, -29.686309194779067],
         [152.915493138411, -29.705804384584727],
         [152.91180992094084, -29.67364534778728],
         [152.90588377564083, -29.699784598162577],
         [152.89941362001227, -29.679482311066238],
         [153.0063161086676, -29.617857534507618],
         [152.93642415875587, -29.64588744372958],
         [152.88809642153862, -29.664749441185663],
         [152.97128095169066, -29.657383006245364],
         [152.88162626591009, -29.69475473217429],
         [152.99634109961102, -29.60815898971637],
         [152.91935917902433, -29.62962510218766],
         [152.8960024077064, -29.573841748009055],
         [152.90956699311096, -29.637531088355423],
         [153.01358890248576, -29.632590404388196],
         [152.91306738743793, -29.592257835359792],
         [152.89303710550584, -29.586510054101893],
         [152.89869570474266, -29.658734113864558],
         [152.99553400232034, -29.608966087007047],
         [153.0084698544764, -29.623337769702303],
         [152.96112757859197, -29.656308362891487],
         [152.87578930263112, -29.587227969371497],
         [152.90606213968297, -29.665110628370982],
         [152.99445489986542, -29.618847454941484],
         [152.94828536755804, -29.70382900281805],
         [152.95537979733407, -29.69879913682976],
         [152.98151904770938, -29.652892691484546],
         [152.99472690502967, -29.642382590301573],
         [152.90265092737707, -29.6966409319199],
         [152.89492330525144, -29.60114928286036],
         [153.0089202236828, -29.61776835248655],
         [153.01529673818922, -29.604025403039834],
         [152.9521469490703, -29.628728822875917],
         [152.9117207389198, -29.635105337382345],
         [152.95034993134578, -29.711552165842622],
         [152.94891410080658, -29.701224887802837],
         [152.94118647868095, -29.696284203835617],
         [152.95376114365166, -29.62432769013617],
         [152.99292988730514, -29.611659384043325],
         [152.91387894382964, -29.701042064659642],
         [152.94864209564233, -29.635377342546608],
         [152.89223000821517, -29.622352308369493],
         [152.92115619674888, -29.61022355350412],
         [152.9772070969907, -29.640046021349562],
         [153.0084698544764, -29.61264930447719],
         [152.88486357327488, -29.665560997577384],
         [152.95331523354633, -29.709576784075942],
         [152.99338025651153, -29.611213473937987],
         [153.00801948527, -29.611931389207584],
         [152.94792418037272, -29.672838250496607],
         [152.90345802466774, -29.664120707937116],
         [152.91594350761738, -29.69367562971936],
         [153.00326162444597, -29.638877736873567],
         [152.8970770510603, -29.620555290644955],
         [152.91154237487765, -29.70598274862687],
         [152.92654279082143, -29.69843794964444],
         [152.95906301480423, -29.69116069672521],
         [152.97568208443042, -29.647952007517326],
         [153.0186232275751, -29.623609774866562],
         [152.98196941691577, -29.62684262313031],
         [152.8608780687084, -29.58866379991071],
         [152.9111811876923, -29.672566245332344],
         [152.9173793381566, -29.58866379991071],
         [152.96131040173515, -29.656397544912554],
         [152.9772070969907, -29.660887859673366],
         [152.90103227369468, -29.659180023969903],
         [152.9900537671257, -29.607797802531042],
         [152.9804444043555, -29.61219893527079],
         [152.99023659026886, -29.655407624478688],
         [152.89061135453278, -29.647862825496258],
         [152.97622163565788, -29.647595279433045],
         [152.97298878739414, -29.62414932609403],
         [152.98493471911632, -29.617857534507618],
         [153.01637584064414, -29.630525840600455],
         [152.9525036771546, -29.684695000197717],
         [153.0053261882337, -29.617228801259085],
         [152.88710650110477, -29.631065391827928],
         [152.88621022179305, -29.618936636962555],
         [152.9214237428121, -29.5798615344312],
         [152.88881433680822, -29.62863964085485],
         [152.96445406797784, -29.63609525781621],
         [152.98224142208002, -29.61588215274094],
         [152.91612187165953, -29.694665550153225],
         [153.01170270274014, -29.63384787088527],
         [152.89519085131465, -29.587495515434703],
         [152.90705206011683, -29.702660718342045],
         [152.95052829538793, -29.71460665006423],
         [152.9251961423033, -29.65522926043655],
         [152.97199886696026, -29.62881800489698],
         [152.97774664821816, -29.61273848649826],
         [152.89591322568532, -29.585341769625888],
         [152.8862994038141, -29.601867198129955],
         [152.95322605152526, -29.714878655228492],
         [152.91028490838056, -29.70050251343218],
         [152.95978093007383, -29.69035359943454],
         [152.88719568312587, -29.654868073251215],
         [152.93031519031265, -29.697269665168434],
         [152.89025016734743, -29.598183980659815],
         [152.92924054695877, -29.65451134516694],
         [152.88782441637437, -29.66340279266751],
         [152.95906301480423, -29.69215061715908],
         [152.9648107960621, -29.650021030406123],
         [152.96822646746904, -29.642293408280505],
         [152.89106172373917, -29.65352142473308],
         [152.88998262128425, -29.621184023893488],
         [152.9742462538912, -29.61579297071988],
         [152.88423484002635, -29.665917725661654],
         [152.8858490346077, -29.65522926043655],
         [152.9182800765694, -29.611213473937987],
         [152.89986398921866, -29.655947175706142],
         [152.95475106408554, -29.695294283401758],
         [152.98601382157125, -29.657922557472823],
         [152.95520143329193, -29.69817040358124],
         [152.98583099842804, -29.658462108700295],
         [152.98637054965553, -29.602317567336357],
         [152.9668798189509, -29.626664259088173],
         [152.97271678222987, -29.648041189538397],
         [152.9000423532608, -29.654961714373343],
         [152.9151364103267, -29.624684418220447],
         [152.91576514357527, -29.669962130317128],
         [153.01583628941668, -29.60465413628836],
         [152.86330381968148, -29.61588215274094],
         [152.98484553709525, -29.603664215854494],
         [152.90956699311096, -29.638159821603956],
         [152.89806697149413, -29.58129736497041],
         [152.968137285448, -29.678675213775563],
         [152.96894438273864, -29.682897982473186],
         [152.99993513506013, -29.610763104731586],
         [152.88719568312587, -29.631154573849],
         [152.9221416580817, -29.630882568684733],
         [152.98403398070351, -29.61013437148305],
         [152.91836925859047, -29.58480221839842],
         [152.91612187165953, -29.634748609298068],
         [152.98511308315844, -29.618579908878285],
         [153.00173215278465, -29.63573407063088],
         [152.8858490346077, -29.604292949103034],
         [152.9811623196251, -29.61561460667774],
         [152.99724183802383, -29.60707988726144],
         [152.94783499835165, -29.63438742211274],
         [152.9852022651795, -29.6804722315001],
         [152.954122330837, -29.703200269569518],
         [152.96274623227436, -29.647501638310924],
         [152.9035472066888, -29.69574465260815],
         [152.95978093007383, -29.61444632220173],
         [152.97792947136134, -29.620733654687093],
         [152.95744436112182, -29.584530213234153],
         [152.87363109772127, -29.583633933922414],
         [152.9773007381128, -29.61444632220173],
         [152.91055245444377, -29.712091717070088],
         [152.9872712880683, -29.606990705240364],
         [153.01799449432656, -29.60357503383343],
         [152.96840483151118, -29.67633864482356],
         [152.99481608705074, -29.60447577224623],
         [152.91890880981794, -29.707958130393546],
         [152.8870173190837, -29.68181888001825],
         [152.92097337360568, -29.696912937084154],
         [152.91531477436885, -29.64310050557117],
         [153.00478663700625, -29.618307903714015],
         [152.90183937098536, -29.635916893774073],
         [152.9117207389198, -29.668254294613664],
         [152.90534422441337, -29.701581615887115],
         [152.9631074194597, -29.64858074076586],
         [152.86060606354414, -29.659630393176297],
         [153.01457882291962, -29.615792970719873],
         [152.90408675791628, -29.65514007841547],
         [152.8862994038141, -29.60267875452169],
         [152.90561177047655, -29.66861548179899],
         [153.01206388992549, -29.615792970719873],
         [152.96157794779836, -29.639506470122093],
         [152.91765134332087, -29.704814464150864],
         [152.92052300439929, -29.687031569149728],
         [152.98062276839767, -29.650828127696794],
         [152.9865533727987, -29.686041648715854],
         [152.91648305884488, -29.67022967638034],
         [152.8960024077064, -29.690081594270282],
         [152.94738462914523, -29.672387881290206],
         [152.94711708308205, -29.708948050827413],
         [152.97568208443042, -29.646154989792787],
         [152.90651250888936, -29.702388713177793],
         [152.95583016654047, -29.7144282860221],
         [152.97568208443042, -29.618936636962548],
         [152.9071412421379, -29.708408499599937],
         [152.9816126888315, -29.611931389207584],
         [152.90686923697365, -29.706522299854335],
         [152.8853094833802, -29.58974290236564],
         [152.99652392275422, -29.609684002276655],
         [152.89016098532636, -29.666635640931258],
         [152.89537367445786, -29.604292949103034],
         [152.99858848654196, -29.618129539671877],
         [152.91881962779686, -29.67553154753288],
         [152.91468604112032, -29.61929782414787],
         [152.92034464035714, -29.61282766851933],
         [152.91890880981794, -29.58246564944641],
         [152.88638858583516, -29.601421288024614],
         [152.9721772310024, -29.678046480527026],
         [152.95708763303753, -29.696912937084154],
         [152.98637054965553, -29.6161541579052],
         [152.98744965211046, -29.657922557472823],
         [152.98852875456538, -29.615164237471333],
         [152.90129981975787, -29.696101380692433],
         [152.9513353926786, -29.71020551732449],
         [152.97280596425094, -29.628639640854857],
         [152.96867683667546, -29.646605358999174],
         [152.91621551278166, -29.706165571770057],
         [152.96993430317252, -29.641664675031965],
         [152.98008321717018, -29.648313194702652],
         [153.01520755616815, -29.61309967368359],
         [153.01925196082362, -29.614174317037467],
         [152.90444348600056, -29.65468970920908],
         [152.88755687031116, -29.662234508191517],
         [152.9807119504187, -29.616510885989477],
         [152.92483495511797, -29.698977500871905],
         [152.91369612068647, -29.673284160601952],
         [152.99571236636248, -29.61219893527079],
         [152.92196329403956, -29.706794305018594],
         [152.9783753814667, -29.644629977232498],
         [152.9664294497445, -29.650199394448254],
         [152.90255728625496, -29.654961714373343],
         [153.00101423751505, -29.61804035765081],
         [152.94981038011832, -29.672115876125947],
         [152.8881856035597, -29.627649720420983],
         [152.88872515478715, -29.68110096474864],
         [152.95654808181007, -29.6913435198684],
         [152.95825591751355, -29.6973588471895],
         [153.0070340239372, -29.611842207186527],
         [152.9671473650141, -29.644629977232498]]),
    NF_20210324 = /* color: #008000 */ee.Geometry.MultiPoint(
        [[152.97038021327788, -29.692239799180147],
         [152.92429986299157, -29.613995952995335],
         [152.9714593157328, -29.657204642203226],
         [152.88279455038608, -29.62199112118416],
         [152.89492330525144, -29.57410929407226],
         [152.88468075013168, -29.687749484419328],
         [152.90157182492214, -29.56872269999969],
         [152.90220055817068, -29.641214305825567],
         [152.94783499835165, -29.693947634883617],
         [152.9050722192491, -29.63169412507646],
         [152.96202831700475, -29.59809479863874],
         [152.97244923616665, -29.5976488885334],
         [152.91962672508754, -29.635016155361274],
         [152.89824533553627, -29.63636280387942],
         [152.86788331646335, -29.60510450549476],
         [152.9328301233068, -29.66528899241312],
         [152.86447210415747, -29.735988039615496],
         [152.97469216399654, -29.69260098636548],
         [152.9514290338007, -29.58183691619788],
         [152.9785582046099, -29.634659427277004],
         [152.98753883413153, -29.595401501602474],
         [152.8665366679452, -29.707329397145006],
         [152.974063430748, -29.676878196051028],
         [152.9181017125273, -29.73787423936111],
         [152.86707621917267, -29.589203351138174],
         [152.86384337090894, -29.662417331334694],
         [152.86006651231668, -29.664120707937116],
         [152.99769220723022, -29.627382174357777],
         [152.92690397800678, -29.625223969447905],
         [152.93849318164467, -29.687477479255065],
         [152.88234864028072, -29.679393129045163],
         [152.91180992094084, -29.62863964085485],
         [152.97810783540348, -29.709037232848477],
         [152.86914078296041, -29.729968253193345],
         [152.87893296887378, -29.6406747545981],
         [152.89546285647893, -29.635016155361274],
         [152.88306655555033, -29.730686168462956],
         [152.95124621065753, -29.57384174800905],
         [152.9255573294886, -29.625313151468973],
         [152.88935388803569, -29.676610649987822],
         [152.8845915681106, -29.671759148041666],
         [152.9730779694152, -29.609055269028115],
         [152.92771107529745, -29.642204226259437],
         [152.9413648427231, -29.62369895688763],
         [152.89447293604505, -29.72260181825306],
         [152.91082445960805, -29.607797802531042],
         [152.99867766856303, -29.641664675031965],
         [152.90723042415897, -29.617500806423337],
         [152.88396283486207, -29.61022355350412],
         [152.91271065935365, -29.664214349059243],
         [152.88180908905326, -29.714878655228492],
         [153.0174549430991, -29.599263083114753],
         [152.88450238608954, -29.73841379058858],
         [152.9956231843414, -29.655768811664014],
         [152.93498832821666, -29.57698541425173],
         [152.94720626510312, -29.630882568684733],
         [152.87561093858898, -29.591450738069117],
         [152.94433014492364, -29.596391422036334],
         [152.98367725261923, -29.691878611994827],
         [152.87030906743644, -29.621451569956694],
         [152.99966758899689, -29.594861950374995],
         [152.93382004374067, -29.617500806423337],
         [152.87839341764632, -29.684605818176646],
         [152.86761577040016, -29.638788554852496],
         [153.01547510223136, -29.60034218556968],
         [152.98287015532856, -29.631154573849],
         [152.98098395558296, -29.682180067203575],
         [152.8855814885445, -29.610852286752653],
         [152.95331523354633, -29.618669090899342],
         [152.86950197014576, -29.708586863642083],
         [152.90067108650933, -29.640046021349555],
         [152.88575985258663, -29.63690235510689],
         [152.97460298197547, -29.67202669410488],
         [152.94352304763297, -29.60447577224622],
         [152.86033851748093, -29.711641347863694],
         [152.94549842939963, -29.664120707937116],
         [152.8909725417181, -29.688734945752138],
         [152.92097337360568, -29.68451217705453],
         [152.88468075013168, -29.669783766274996],
         [152.92833980854599, -29.739938803148856],
         [152.96993430317252, -29.71245290425542],
         [152.90597295766193, -29.693318901635077],
         [152.87390310288552, -29.628907186918063],
         [152.95726599707967, -29.70876968678527],
         [152.92537450634543, -29.615792970719866],
         [152.8762396718375, -29.604114585060895],
         [152.89330465156905, -29.600881736797138],
         [152.93651334077694, -29.676249462802495],
         [152.87561093858898, -29.635466524567676],
         [152.95798391234928, -29.6966409319199],
         [152.89177963900877, -29.669061391904336],
         [152.89824533553627, -29.734191021890965],
         [152.8696803341879, -29.72799287142667],
         [152.89474494120932, -29.66537817443419],
         [152.9842168038467, -29.659808757218435],
         [152.88064080457727, -29.703646179674863],
         [152.88297737352926, -29.582287285404277],
         [152.87183853909775, -29.687120751170795],
         [152.88621022179305, -29.678853577817705],
         [152.92717152406996, -29.621629933998832],
         [152.87677922306497, -29.69044278145561],
         [152.931844661974, -29.678224844569165],
         [152.86689785513053, -29.59702015528487],
         [152.91441849505713, -29.613545583788934],
         [152.9830485193707, -29.715864116561303],
         [152.86096725072946, -29.696012198671355],
         [152.90013153528187, -29.71362118873142],
         [152.86141761993585, -29.606990705240364],
         [153.00361835253025, -29.62962510218766],
         [152.97954366594269, -29.667358015301918],
         [152.9679544623048, -29.61202057122866],
         [152.93831035850147, -29.689724866186005],
         [152.94765217520845, -29.620912018729232],
         [152.91082445960805, -29.568901064041835],
         [152.87758632035565, -29.726557040887467],
         [152.91468604112032, -29.58498058244056],
         [152.9783753814667, -29.625045605405766],
         [152.88540312450235, -29.610491099567327],
         [152.95771636628606, -29.723141369480533],
         [152.88647776785623, -29.739938803148856],
         [152.97173132089705, -29.62028328548069],
         [152.9702910312568, -29.65747664736748],
         [152.9526865002978, -29.573123832739448],
         [152.94657753185456, -29.591629102111245],
         [152.8673437652359, -29.58974290236564],
         [152.9325625772436, -29.706794305018594],
         [152.93480996417452, -29.70445773606659],
         [152.98888548264966, -29.645075887337846],
         [152.96876601869653, -29.631422119912198],
         [152.9679544623048, -29.606451154012912],
         [152.87067025462176, -29.618307903714015],
         [152.97388506670586, -29.714789473207425],
         [152.92106255562675, -29.57177718422131],
         [152.866269121882, -29.73185445293896],
         [152.9244782270337, -29.61776835248655],
         [152.9749641691608, -29.711552165842622],
         [152.95618689462475, -29.632590404388196],
         [152.9833160654339, -29.669155033026456],
         [152.94963201607618, -29.61327803772573],
         [152.8720169031399, -29.690175235392402],
         [152.93462714103134, -29.588213430704307],
         [152.96229586306796, -29.70032414939005],
         [152.86950197014576, -29.656937096140012],
         [153.0170045738927, -29.618040357650806],
         [152.97792947136134, -29.642204226259437],
         [152.8793833380802, -29.659719575197368],
         [152.95331523354633, -29.571955548263443],
         [152.9090274418835, -29.625045605405766],
         [152.9259140575729, -29.588396253847495],
         [152.91495358718353, -29.72987907117229],
         [152.95080030055217, -29.64642699495704],
         [152.96723654703518, -29.680739777563314],
         [152.96876601869653, -29.615342601513472],
         [152.8774079563135, -29.57761414750027],
         [152.8900718033053, -29.585787679731233],
         [152.88854679074504, -29.72305218745946],
         [152.94720626510312, -29.665471815556316],
         [152.87327436963696, -29.708140953536738],
         [152.87570012061005, -29.722334272189855],
         [152.94289431438443, -29.689185314958536],
         [152.87561093858898, -29.690531963476676],
         [152.94621634466924, -29.598812713908348],
         [152.94504806019327, -29.71685403699517],
         [152.9398398301628, -29.66358561581071],
         [152.93660698189908, -29.679482311066238],
         [152.95870182761888, -29.65136767892426],
         [152.90129981975787, -29.620733654687093],
         [152.95403314881594, -29.719190605947166],
         [152.86213553520545, -29.59423321712646],
         [152.94334022448976, -29.737245506112576],
         [152.93759244323186, -29.707601402309272],
         [152.91845844061154, -29.710834250573015],
         [152.9047154911648, -29.739582075064586],
         [152.93516669225883, -29.58498058244056],
         [152.92896854179455, -29.598455985824074],
         [152.96705818299307, -29.62881800489698],
         [152.9066908729315, -29.625852702696445],
         [152.93839954052257, -29.71649284980984],
         [152.95906301480423, -29.653071055526677],
         [152.9090274418835, -29.7163144857677],
         [152.87318518761592, -29.58147572901255],
         [152.88621022179305, -29.673284160601952],
         [152.8801012533498, -29.696190562713507],
         [152.88612103977195, -29.702299531156726],
         [152.9259140575729, -29.688917768895333],
         [152.9730779694152, -29.597827252575538],
         [152.93148347478868, -29.667264374179798],
         [152.88522030135914, -29.604921682351574],
         [153.0165542046863, -29.62935755612446],
         [152.99795975329343, -29.631604943055393],
         [152.86195717116334, -29.60016382152754],
         [152.91962672508754, -29.6418430390741],
         [152.91998791227286, -29.568901064041835],
         [152.99517727423608, -29.596926514162742],
         [152.97532089724507, -29.71936896998931],
         [152.92851817258813, -29.734191021890965],
         [152.96517198324744, -29.672477063311273],
         [152.91603268963846, -29.658105380616018],
         [152.95430069487915, -29.73733468813364],
         [152.90220055817068, -29.57779251154241],
         [152.90938416996778, -29.656125539748285],
         [153.01709375591378, -29.60079255477608],
         [152.97487498713974, -29.692868532428687],
         [152.9415476658663, -29.622441490390557],
         [152.98574181640697, -29.706522299854335],
         [152.88710650110477, -29.67588827561716],
         [152.98960785702033, -29.695115919359615],
         [152.93220139005825, -29.73580967557337],
         [152.8942945720029, -29.5976488885334],
         [152.96858319555332, -29.682897982473186],
         [152.8665366679452, -29.662863241440043],
         [152.867432947257, -29.728889150738418],
         [152.8884531496229, -29.573841748009055],
         [152.87264563638846, -29.676878196051028],
         [152.95816673549248, -29.682090885182507],
         [152.93382004374067, -29.64130348784664],
         [152.93498832821666, -29.724760023162926],
         [152.9429834964055, -29.597287701348066],
         [152.9020177350275, -29.634837791319143],
         [152.96580071649598, -29.637531088355423],
         [152.91163155689873, -29.625495974612168],
         [152.8712989878703, -29.627471356378837],
         [152.92564651150968, -29.596658968099536],
         [152.89914607394905, -29.720715618507448],
         [152.8835124656557, -29.675620729553955],
         [152.93660698189908, -29.71891860078291],
         [152.89294792348477, -29.66043749046698],
         [152.93956782499856, -29.71182417100688],
         [152.97460298197547, -29.719908521216784],
         [152.86437846303534, -29.621362387935626],
         [152.9251961423033, -29.597738070554463],
         [152.97639999970002, -29.60932727419238],
         [152.88099753266155, -29.617050437216946],
         [152.89150763384453, -29.63277322753139],
         [152.9402901993692, -29.720987623671718],
         [152.92420622186944, -29.594500763189668],
         [152.91378976180857, -29.727453320199213],
         [153.00218252199105, -29.616243339926267],
         [152.89680950499707, -29.600881736797138],
         [152.8898934392632, -29.65091730971787],
         [152.8970770510603, -29.702482354299914],
         [152.93427041294706, -29.63151576103432],
         [152.95448351802233, -29.604564954267296],
         [152.90615132170402, -29.67202669410488],
         [152.87650721790072, -29.691611065931607],
         [152.9719096849392, -29.599713452321136],
         [152.972895146272, -29.686041648715854],
         [153.00747993404252, -29.601688834087817],
         [152.96786528028372, -29.692507345243353],
         [152.91962672508754, -29.569079428083974],
         [152.8777646843978, -29.650466940511468],
         [152.89564122052107, -29.691521883910543],
         [152.98565263438593, -29.650377758490393],
         [153.01754412512017, -29.62693180515138],
         [152.86393255293, -29.631961671139663],
         [152.89905689192798, -29.614085135016403],
         [153.0018213348057, -29.62773890244205],
         [152.8682445036487, -29.612916850540397],
         [152.9420827579927, -29.65118485578107],
         [152.94540924737856, -29.57779251154241],
         [152.87570012061005, -29.633491142801002],
         [152.91594350761738, -29.63393705290634],
         [152.94469133210896, -29.737156324091508],
         [153.00406872173664, -29.63133293789113],
         [152.96247868621117, -29.604654136288367],
         [152.89869570474266, -29.634926973340214],
         [152.89734905622453, -29.711641347863694],
         [152.99077168239526, -29.598277621781936],
         [152.87615048981644, -29.694576368132157],
         [152.9413648427231, -29.688734945752138],
         [152.87713595114926, -29.617951175629738],
         [152.92726070609103, -29.712992455482887],
         [152.86078888668732, -29.704725282129797],
         [152.9481917264359, -29.66097704169444],
         [152.97604327161574, -29.611842207186527],
         [152.88710650110477, -29.686130830736936],
         [152.89321546954798, -29.723141369480526],
         [152.93893909175003, -29.687477479255065],
         [152.91163155689873, -29.63312995561567],
         [152.96436488595677, -29.730775350484027],
         [152.86797249848442, -29.571326815014917],
         [152.8708486186639, -29.577975334685597],
         [153.01116315151268, -29.635644888609814],
         [152.93022600829158, -29.722963005438395],
         [152.93364167969852, -29.65181358902961],
         [152.90731960618004, -29.607169069282506],
         [153.00487581902732, -29.630882568684733],
         [152.87336355165803, -29.65514007841547],
         [152.8952844924368, -29.66610054880485],
         [152.89717069218239, -29.73518094232484],
         [152.89752742026667, -29.725834666516807],
         [152.9275327112553, -29.683165528536385],
         [152.9244782270337, -29.633669506843137],
         [153.00909858772494, -29.60519368751583],
         [152.87884378685274, -29.641753857053033],
         [152.9024681042339, -29.635105337382345],
         [152.91774052534194, -29.608876904985983],
         [152.8696803341879, -29.57662868616746],
         [152.86456128617854, -29.681551333955042],
         [152.94621634466924, -29.568093966751164]]),
    F_20210319 = /* color: #00ffff */ee.Geometry.MultiPoint(
        [[151.51996395452247, -32.739955105391445],
         [151.5337069039692, -32.736628616005575],
         [151.6827345202764, -32.69683559820462],
         [151.62892654786447, -32.74498497137973],
         [151.53532109855053, -32.73294539853543],
         [151.67357552671263, -32.68991953247072],
         [151.76259702014363, -32.72989091431381],
         [151.65569899058937, -32.818555679660534],
         [151.5266080150921, -32.82214971510961],
         [151.76520113515886, -32.682909825614715],
         [151.67168932696703, -32.69279119354915],
         [151.67312515750623, -32.78585709163561],
         [151.69082332958735, -32.77076749367075],
         [151.50109749796533, -32.771752955003564],
         [151.71696257996265, -32.72764798648393],
         [151.52409308209795, -32.745252517442935],
         [151.6297381042562, -32.74040101549678],
         [151.67312515750623, -32.769238022009425],
         [151.5543659191498, -32.67940943128775],
         [151.60449513319264, -32.70554868166305],
         [151.67914494392838, -32.69863261592916],
         [151.70501664824047, -32.74238085636452],
         [151.51511245257632, -32.7528909575475],
         [151.62012428238498, -32.74929692209841],
         [151.64015456431704, -32.73707898521197],
         [151.67689755699743, -32.76780219147021],
         [151.62946609909193, -32.69126618098887],
         [151.72271036122055, -32.68452847929711],
         [151.6639617048414, -32.69593485979182],
         [151.67339270356945, -32.78612909679987],
         [151.52032068260675, -32.74776745043709],
         [151.68992259117456, -32.815951564645324],
         [151.52310762076516, -32.74201966917919],
         [151.50325124377414, -32.7721141421889],
         [151.68219942815, -32.69827142874383],
         [151.5309199658108, -32.7362718879213],
         [151.53182070422358, -32.77534699045264],
         [151.7287301476427, -32.70518749447773],
         [151.4957956268128, -32.770678311649675],
         [151.66072885657766, -32.72989091431381],
         [151.67995204121905, -32.708241978699334],
         [151.52364717199262, -32.81711984912133],
         [151.6782442055156, -32.69665723416249],
         [151.48690417931223, -32.74839618368561],
         [151.73286373431924, -32.709593086318534],
         [151.54161289013695, -32.73725734925411],
         [151.5277762995681, -32.8033768996746],
         [151.71983870014213, -32.77031712446436],
         [151.49624599601918, -32.77606490572225],
         [151.5275087535049, -32.74094056672426],
         [151.51232551441794, -32.756484992996576],
         [151.51771656759152, -32.74884655289201],
         [151.52211770033128, -32.740940566724255],
         [151.7258540274632, -32.68803333272512],
         [151.6644120740478, -32.74830700166455],
         [151.6274015353042, -32.771124221755024],
         [151.7652903171799, -32.683627740884305],
         [151.5328061655564, -32.770678311649675],
         [151.699803959109, -32.80139705880687],
         [151.67761547226704, -32.69737514943209],
         [151.6710605937185, -32.7723816882521],
         [151.72666558385495, -32.725222235510856],
         [151.68192742298572, -32.69602850091395],
         [151.5166374651366, -32.748396183685614],
         [151.5036124309595, -32.7723816882521],
         [151.7426559202326, -32.73735099037622],
         [151.7619682868951, -32.73051964756235],
         [151.68246697421318, -32.79601046473431],
         [151.54026178251775, -32.78612909679988],
         [151.68138787175826, -32.6995288952409],
         [151.65138703987068, -32.73932637214291],
         [151.70770994527675, -32.781634322938004],
         [151.72172489988773, -32.69135536300993],
         [151.72342827649018, -32.694137842067285],
         [151.52885540202303, -32.78810447856656],
         [151.53388526801132, -32.773821977892354],
         [151.5567916701229, -32.76456934320647],
         [151.7731071213266, -32.73312822167862],
         [151.72199244595095, -32.785500363551336],
         [151.5698167043, -32.70321211271105],
         [151.65677363394323, -32.745341699464014],
         [151.6744718060244, -32.69387029600408],
         [151.71965587699893, -32.725761786738325],
         [151.7194775129568, -32.72791553254714],
         [151.48932993028532, -32.7462424378768],
         [151.76358694057748, -32.685513940629924],
         [151.5324494374721, -32.770856675691824],
         [151.76403285068284, -32.68812251474619],
         [151.56352937181464, -32.76555480453928],
         [151.5254397306161, -32.791966060078835],
         [151.55472710633512, -32.764480161185396],
         [151.50271615164775, -32.68461766131818],
         [151.6765363698121, -32.786757830048415],
         [151.6769867390185, -32.70716733534545],
         [151.4926519605701, -32.75324768563176],
         [151.5503259735954, -32.699707259283045],
         [151.68246697421318, -32.79717874921031],
         [151.61626270087268, -32.6923452834438],
         [151.52957331729266, -32.691176998967805],
         [151.67716510306064, -32.784421261096405],
         [151.53810803670893, -32.78693619409055],
         [151.7425622791105, -32.69072662976139],
         [151.6762688237489, -32.76986675525796],
         [151.6316243040018, -32.732767034493286],
         [151.5277762995681, -32.792055242099906],
         [151.69225916012655, -32.72099946681325],
         [151.67546172645822, -32.694677393294754],
         [151.6492288349608, -32.82682285301362],
         [151.5289445840441, -32.79394144184551],
         [151.52481099736755, -32.81244671121731],
         [151.58356411284777, -32.7106677296724],
         [151.74849288351157, -32.71749461338523],
         [151.65291205243096, -32.82412509687629],
         [151.73052716536725, -32.713454667830824],
         [151.53586064977802, -32.78307461257827],
         [151.72450737894508, -32.690904993803535],
         [151.7159726595288, -32.77139622691928],
         [151.74283428427475, -32.738247269687974],
         [151.51430089618458, -32.76169322302699],
         [151.71858123364507, -32.72180656410392],
         [151.65461988813442, -32.73968310022718],
         [151.52553337173822, -32.79870376177059],
         [151.71965587699893, -32.694677393294754],
         [151.68426399193774, -32.70222665137825],
         [151.48879037905783, -32.754415970107765],
         [151.51771656759152, -32.74947528614055],
         [151.72127453068134, -32.72162820006179],
         [151.73214581904963, -32.7443562381312],
         [151.76259702014363, -32.739955105391445],
         [151.572153273252, -32.755495072562695],
         [151.68210578702787, -32.76169322302699],
         [151.65524862138295, -32.82017433334293],
         [151.76834480140153, -32.82735794514004],
         [151.6729467934641, -32.77229250623103],
         [151.74633913770276, -32.691444545031004],
         [151.5679305045544, -32.725761786738325],
         [151.5337069039692, -32.775257808431576],
         [151.72477938410935, -32.7006971797169],
         [151.63674335201117, -32.7374401723973],
         [151.76304738935002, -32.69395947802515],
         [151.5391871391639, -32.7756189956169],
         [151.6700706732846, -32.77130704489822],
         [151.53972669039135, -32.76663390699421],
         [151.72738349912456, -32.72513305348979],
         [151.62641161487034, -32.682013546302976],
         [151.64905047091867, -32.74031183347571],
         [151.5270583842985, -32.81927359493014],
         [151.51412253214247, -32.76232195627553],
         [151.59407421403074, -32.68497884850351],
         [151.52714756631957, -32.795198908342584],
         [151.5400834184756, -32.80355526371674],
         [151.7610675484823, -32.68210272832403],
         [151.60144064897102, -32.82125343579787],
         [151.51376134495712, -32.77993094633558],
         [151.6122182962172, -32.722618120495646],
         [151.67959085403373, -32.70743488140865],
         [151.56164317206904, -32.76349024075153],
         [151.6304560195258, -32.692612829507006],
         [151.76636941963483, -32.687043412291246],
         [151.7498395320297, -32.71722706732203],
         [151.67995204121905, -32.704019210001725],
         [151.7263935786907, -32.68776132756086],
         [151.73124508063685, -32.71363303187295],
         [151.51583036784592, -32.749207740077345],
         [151.66054603343446, -32.77633691088651],
         [151.53236025545104, -32.77184213702464],
         [151.531102788954, -32.77974812319239],
         [151.5284942148377, -32.77965894117133],
         [151.7438242047086, -32.69126618098887],
         [151.78891909366212, -32.731777114059426],
         [151.7671765169255, -32.73114838081088],
         [151.52696920227743, -32.78684701206948],
         [151.76394366866177, -32.68084526182697],
         [151.5108896838787, -32.756212987832306],
         [151.7709533755178, -32.732767034493286],
         [151.53047405570544, -32.780020128356654],
         [151.52436508726223, -32.8174765772056],
         [151.52283561560088, -32.7970851080882],
         [151.7263935786907, -32.68892961203686],
         [151.76565150436522, -32.82520419933122],
         [151.6848035431652, -32.68560758175204],
         [151.72558648140003, -32.69108335784568],
         [151.6717785089881, -32.77849065669533],
         [151.53325653476278, -32.7832529766204],
         [151.68462517912306, -32.70123673094438],
         [151.67303597548516, -32.70698451220226],
         [151.6755509084793, -32.70653860209693],
         [151.62596124566394, -32.68282064359365],
         [151.51906321610969, -32.74848982480774],
         [151.6801304052612, -32.699800900405165],
         [151.65012957337362, -32.82251090229494],
         [151.68812557345, -32.71534086757642],
         [151.7263935786907, -32.70446957920812],
         [151.76349329945538, -32.73043046554128],
         [151.76466158393137, -32.6810236258691],
         [151.66387252282033, -32.69557813170755],
         [151.76448321988923, -32.82385755081308],
         [151.53693975223294, -32.78379252784787],
         [151.76511195313776, -32.82358554564882],
         [151.7082494965042, -32.745341699464014],
         [151.67312515750623, -32.69108335784568],
         [151.48690417931223, -32.77292123947956],
         [151.7638544866407, -32.82601129662189],
         [151.75936417187987, -32.68003816453629],
         [151.5964999650038, -32.68372138200644],
         [151.67141732180275, -32.7723816882521],
         [151.51879567004647, -32.749207740077345],
         [151.53586064977802, -32.7377077184605],
         [151.68255615623426, -32.69108335784568],
         [151.72711149396034, -32.68767214553979],
         [151.50846393290564, -32.75558425458377],
         [151.67770465428814, -32.707256517366524],
         [151.62084219765458, -32.75154430902935],
         [151.7213637127024, -32.72243529735246],
         [151.62847617865808, -32.690008714491796],
         [151.72630439666963, -32.689107976079],
         [151.52220688235238, -32.78226305618654],
         [151.63395641385276, -32.73681143914877],
         [151.65264450636775, -32.82206053308854],
         [151.67312515750623, -32.783792527847865],
         [151.76556232234415, -32.68901879405792],
         [151.53954386724814, -32.76672308901529],
         [151.61599069570843, -32.693241562755546],
         [151.72450737894508, -32.691984096258466],
         [151.5270583842985, -32.796817562024984],
         [151.75217610098173, -32.71506886241216],
         [151.53388526801132, -32.7813667768748],
         [151.55957860828127, -32.763757786814736],
         [151.5286770379809, -32.739955105391445],
         [151.72675476587602, -32.690994175824606],
         [151.73097753457364, -32.713811395915094],
         [151.6727639703209, -32.783881709868936],
         [151.76681978884125, -32.731959937202625],
         [151.68040241042544, -32.69818224672276],
         [151.71929914891467, -32.69018707853394],
         [151.51106804792084, -32.72423231507699],
         [151.6644120740478, -32.76564398656034],
         [151.5166374651366, -32.82268926633708],
         [151.5270583842985, -32.79816421054312],
         [151.65722400314965, -32.81945641807333],
         [151.52642965104997, -32.79430262903084],
         [151.68749684020148, -32.709860632381734],
         [151.534692365302, -32.77166377298251],
         [151.5823066463507, -32.72827671973247],
         [151.6928878933751, -32.72198938724711],
         [151.65362996770057, -32.737707718460506],
         [151.68372444071028, -32.70375166393851],
         [151.76133955364654, -32.69198409625847],
         [151.53047405570544, -32.7837033458268],
         [151.67617964172783, -32.787114558132686],
         [151.6354858855141, -32.738247269687974],
         [151.76582986840737, -32.689379981243256],
         [151.6523725012035, -32.7443562381312],
         [151.52669719711318, -32.781634322938],
         [151.6829173434196, -32.79591682361219],
         [151.76133955364654, -32.68758296351872],
         [151.60206938221958, -32.82107061265469],
         [151.51645910109445, -32.747499904373875],
         [151.52606846386465, -32.793134344554836],
         [151.64330268966077, -32.731777114059426],
         [151.51097886589977, -32.724053951034854],
         [151.67914494392838, -32.69935053119877],
         [151.6300948323405, -32.68560758175204],
         [151.65102585268536, -32.82214971510961],
         [151.70007596427325, -32.80157988195006],
         [151.517087834343, -32.748039455601344],
         [151.62533251241538, -32.748039455601344],
         [151.62910937100767, -32.74166294109492],
         [151.66665500187767, -32.72459350226232],
         [151.52597928184358, -32.783792527847865],
         [151.5303804145833, -32.77534699045264],
         [151.67312515750623, -32.78918358102148],
         [151.72657640183388, -32.70617741491159],
         [151.7229823663848, -32.68991953247073],
         [151.7256756634211, -32.70474158437238],
         [151.51870202892434, -32.744712966215474],
         [151.65201577311922, -32.82798667838856],
         [151.50064712875894, -32.77876266185958],
         [151.4881616458093, -32.74902491693416],
         [151.5173553804062, -32.78316379459933],
         [151.51861284690327, -32.74076220268211],
         [151.68767520424362, -32.77130704489822],
         [151.67339270356945, -32.689379981243256],
         [151.6744718060244, -32.81846649763946],
         [151.72693312991817, -32.69216246030061],
         [151.67204605505128, -32.69225164232168],
         [151.52723674834064, -32.74282676646987],
         [151.67258560627877, -32.78738656329695],
         [151.6087134427892, -32.68362774088431],
         [151.5391871391639, -32.78585709163561],
         [151.6558773546315, -32.82735794514004],
         [151.50612736395362, -32.75837119274217],
         [151.53002368649905, -32.73294539853542],
         [151.51169678116938, -32.75684172108084],
         [151.67231806021556, -32.71363303187295],
         [151.67689755699743, -32.69674641618355],
         [151.52247888751663, -32.74336631769732],
         [151.75082945246356, -32.7080636146572],
         [151.76116118960442, -32.68111280789017],
         [151.57395029097654, -32.701325912965444]]),
    NF_20210319 = /* color: #008000 */ee.Geometry.MultiPoint(
        [[151.57853424685948, -32.80355526371674],
         [151.5324494374721, -32.72531141753193],
         [151.57960889021336, -32.768520106739814],
         [151.49094412486664, -32.733306585720754],
         [151.50307287973203, -32.68542475860885],
         [151.4928347837133, -32.79906494895592],
         [151.6215601129242, -32.79771384133674],
         [151.64267395641224, -32.69674641618355],
         [151.5097213994027, -32.68003816453629],
         [151.54493492042175, -32.80741684522902],
         [151.65507025734084, -32.751450667907235],
         [151.72621521464856, -32.766366360931],
         [151.51035013265124, -32.75252977036216],
         [151.55598457283222, -32.805263099420216],
         [151.51322625283072, -32.74300958961305],
         [151.57017789148534, -32.709410263175336],
         [151.70851704256742, -32.678959062081354],
         [151.6516545859339, -32.81056051147171],
         [151.7614287356676, -32.72630133796579],
         [151.60215856424063, -32.789361945063625],
         [151.58059881064722, -32.70895989396894],
         [151.59290592955475, -32.69575649574968],
         [151.5277762995681, -32.74633161989787],
         [151.5063993691179, -32.74767826841601],
         [151.79215194192585, -32.76268314346085],
         [151.6030548435524, -32.823585545648825],
         [151.4760328909439, -32.71641997003135],
         [151.7880183552493, -32.80076832555834],
         [151.7121110780165, -32.745252517442935],
         [151.62775826338847, -32.682909825614715],
         [151.54098415688844, -32.77660445694971],
         [151.73429956485845, -32.69961807726197],
         [151.5828417384771, -32.80391199180102],
         [151.55957860828127, -32.69315238073448],
         [151.58670777909046, -32.74597043271254],
         [151.73969061803206, -32.7922380652431],
         [151.5956884086121, -32.70671696613906],
         [151.59362384482438, -32.6826422795515],
         [151.68974422713242, -32.715340867576415],
         [151.77059218833244, -32.753965600901374],
         [151.47468624242578, -32.81864486168161],
         [151.58221300522857, -32.78819366058762],
         [151.648243373628, -32.78037685644094],
         [151.6570456391075, -32.78819366058762],
         [151.62290676144232, -32.712643111439085],
         [151.6250649663522, -32.78990149629109],
         [151.61698061614229, -32.79825339256419],
         [151.4926519605701, -32.741662941094916],
         [151.77984482301835, -32.74282676646987],
         [151.47522579365324, -32.70051881567477],
         [151.65785273639818, -32.733306585720754],
         [151.4719929453895, -32.7737327958713],
         [151.67833338753664, -32.741301753909575],
         [151.79466687492, -32.787743291381226],
         [151.46822054589828, -32.77543617247371],
         [151.7643048558471, -32.80570900952556],
         [151.60584178171078, -32.73869763889437],
         [151.53505355248734, -32.736539433984504],
         [151.75469103397586, -32.82251090229494],
         [151.54664275612524, -32.79879294379166],
         [151.4904982147613, -32.79070859358176],
         [151.64940719900295, -32.79169851401563],
         [151.50774601763604, -32.796906744046055],
         [151.72055661541174, -32.73088083474767],
         [151.75630968765827, -32.748039455601344],
         [151.78568178629732, -32.75199021913469],
         [151.6912692396927, -32.68362774088431],
         [151.58625740988404, -32.82035269738507],
         [151.7280122323731, -32.80643138389622],
         [151.60341603073772, -32.72719761727753],
         [151.70474464307622, -32.71165765010627],
         [151.48708254335435, -32.75199021913469],
         [151.5036124309595, -32.74633161989787],
         [151.70842786054635, -32.71300429862442],
         [151.65174376795497, -32.712197201333744],
         [151.78595379146157, -32.7015979181297],
         [151.71408645978318, -32.77471825720411],
         [151.5593957851381, -32.685157212545654],
         [151.73627494662512, -32.81612992868746],
         [151.7089674117738, -32.74381668690373],
         [151.6609072206198, -32.78316379459933],
         [151.60144064897102, -32.683449376842184],
         [151.49750346251625, -32.78792611452441],
         [151.49274114259117, -32.78307461257827],
         [151.58122754389575, -32.72037073356471],
         [151.53586064977802, -32.75351969079603],
         [151.66297178440755, -32.7635794227726],
         [151.54951441720365, -32.73501442142422],
         [151.79062247026454, -32.82583293257976],
         [151.73169544984324, -32.68524639456672],
         [151.6651299893174, -32.800322415452996],
         [151.593262657639, -32.728455083774605],
         [151.5999111773097, -32.68353855886325],
         [151.7707705523746, -32.79367389578231],
         [151.61670861097804, -32.700697179716904],
         [151.51897403408864, -32.71911326706763],
         [151.6712389577606, -32.741480117951724],
         [151.6068272430436, -32.752980139568564],
         [151.73708650301685, -32.77265369341636],
         [151.51537999863953, -32.72881627095993],
         [151.49211240934264, -32.72153901804071],
         [151.5208602338342, -32.775525354494775],
         [151.64959002214613, -32.69243446546487],
         [151.7346607520438, -32.82726876311897],
         [151.78388476857276, -32.68353855886325],
         [151.75037908325717, -32.7721141421889],
         [151.48995866353383, -32.826194119765084],
         [151.62560451757966, -32.710578547651345],
         [151.74498803008356, -32.807238481186886],
         [151.79574597737493, -32.73348494976289],
         [151.60377275882198, -32.767084276200606],
         [151.64653553792454, -32.70779606859399],
         [151.54313790269723, -32.68830087878833],
         [151.55535583958368, -32.74219803322133],
         [151.6596497541227, -32.71075691169348],
         [151.68381362273135, -32.74660362506213],
         [151.66297178440755, -32.682191910345104],
         [151.6003615465161, -32.80813476049863],
         [151.48376051306954, -32.70276174350465],
         [151.73780441828646, -32.801669063971126],
         [151.78819671929148, -32.799154130976994],
         [151.68426399193774, -32.70384084595958],
         [151.5524797194042, -32.707702427471865],
         [151.71624466469308, -32.75693090310192],
         [151.76537949920098, -32.81298626244478],
         [151.68785802738682, -32.79672838000391],
         [151.7599929051284, -32.81568401858211],
         [151.5918268270998, -32.80319407653141],
         [151.68453153800095, -32.779837305213455],
         [151.64204076406267, -32.78073804362626],
         [151.6609072206198, -32.72126701287645],
         [151.7002543283154, -32.709949814402805],
         [151.478458641917, -32.732767034493286],
         [151.60781716347745, -32.7061774149116],
         [151.5093602122174, -32.80849594768396],
         [151.60008954135185, -32.68695423027019],
         [151.67707592103957, -32.71147928606415],
         [151.54196961822126, -32.72881627095993],
         [151.48654299212689, -32.79591682361219],
         [151.61473322921137, -32.80436236100741],
         [151.69396699583004, -32.718306169776966],
         [151.47576534488073, -32.75010401938909],
         [151.623629135813, -32.711657650106275],
         [151.59101972980912, -32.742470038385584],
         [151.61069328365693, -32.73842563373012],
         [151.6582139235835, -32.76798055551235],
         [151.58913353006352, -32.79349553174016],
         [151.6940561778511, -32.69404866004622],
         [151.61985673632176, -32.76798055551235],
         [151.75397311870626, -32.805263099420216],
         [151.6405157515024, -32.684528479297114],
         [151.52957331729266, -32.81729821316346],
         [151.77903772572768, -32.82816950153176],
         [151.49373106302505, -32.72216775128925],
         [151.5614648080269, -32.72998455543594],
         [151.7310667165947, -32.77076749367075],
         [151.7469678709513, -32.68461766131818],
         [151.57547976263788, -32.74660362506212],
         [151.47765154462633, -32.81990232817868],
         [151.5088206609899, -32.75136148588616],
         [151.7926914931533, -32.712197201333744],
         [151.76619105559269, -32.68372138200644],
         [151.4939094270672, -32.74821781964347],
         [151.77633996959034, -32.76223277425446],
         [151.58275255645603, -32.783342158641474],
         [151.69351662662365, -32.707702427471865],
         [151.55167262211353, -32.71579123678282],
         [151.4684880919615, -32.822956812400285],
         [151.5536480038802, -32.77543617247371],
         [151.7097745090645, -32.73528196748744],
         [151.49912211619866, -32.80005041028874],
         [151.75549813126653, -32.70411285112384],
         [151.71273981126504, -32.77651527492865],
         [151.52912294808624, -32.79582764159112],
         [151.4928347837133, -32.781094771710535],
         [151.79286985719546, -32.82682285301362],
         [151.65560534946724, -32.68830087878833],
         [151.56245026935972, -32.813075444465845],
         [151.78819671929148, -32.77732237221932],
         [151.64204076406267, -32.74732154033173],
         [151.6608180385987, -32.68425647413286],
         [151.73834396951392, -32.81083251663596],
         [151.6940561778511, -32.750732752637624],
         [151.65066466550002, -32.726390519986865],
         [151.54430618717322, -32.75100475780188],
         [151.66306542552965, -32.725761786738325],
         [151.67222441909342, -32.760074569344596],
         [151.57808387765309, -32.82376836879202],
         [151.77652279273354, -32.7177666185495],
         [151.51412253214247, -32.804634366171676],
         [151.48205267736608, -32.740222651454644],
         [151.56541557156024, -32.820085151321855],
         [151.66881320678755, -32.79987204624659],
         [151.53352853992706, -32.72710843525647],
         [151.69414535987218, -32.81487246219039],
         [151.48438924631807, -32.715430049597494],
         [151.50145868515068, -32.712197201333744],
         [151.62901572988557, -32.794213447009774],
         [151.5446673743586, -32.78756492733908],
         [151.63099557075327, -32.73051964756235],
         [151.73304209836138, -32.75477715729309],
         [151.48376051306954, -32.74678198910427],
         [151.64042656948132, -32.694860216437945],
         [151.4978646497016, -32.740222651454644],
         [151.7669089708623, -32.814515734106116],
         [151.76511195313776, -32.78738656329695],
         [151.56613348682984, -32.80795639645649],
         [151.76978509104177, -32.77965894117133],
         [151.76565150436522, -32.753965600901374],
         [151.67285315234196, -32.814515734106116],
         [151.49992921348934, -32.78037685644093],
         [151.62461459714578, -32.82421427889736],
         [151.71291817530718, -32.80939222699571],
         [151.6886651246775, -32.82691203503469],
         [151.61859481072364, -32.78962949112683],
         [151.61015373242947, -32.806698929959424],
         [151.50289451568992, -32.776693638970784],
         [151.67231806021556, -32.76834174269768],
         [151.70546255834583, -32.81118924472024],
         [151.59236637832728, -32.77112422175503],
         [151.48879037905783, -32.81496164421146],
         [151.74014098723848, -32.67994452341417],
         [151.56991034542213, -32.69171655019527],
         [151.69432372391432, -32.82430792001948],
         [151.49112694800982, -32.69360274994087],
         [151.47998811357832, -32.79843621570739],
         [151.49435979627359, -32.7901690423543],
         [151.75118618054785, -32.758099187577905],
         [151.52292479762195, -32.777594377383586],
         [151.48492879754554, -32.801758245992204],
         [151.663511335635, -32.75324768563176],
         [151.53999423645456, -32.78954030910576],
         [151.4750474296111, -32.70833116072041],
         [151.7626862021647, -32.75324768563176],
         [151.52256806953767, -32.72486104832553],
         [151.59119809385126, -32.8271795810979],
         [151.70393754578555, -32.75477715729309],
         [151.46911682521002, -32.80732766320795],
         [151.73286373431924, -32.81244671121731],
         [151.7725675700991, -32.7647477072486],
         [151.5082855688635, -32.82493665326801],
         [151.6115003809476, -32.77741155424039],
         [151.67150650382382, -32.748579006828805],
         [151.64617435073922, -32.69503858048008],
         [151.46956719441644, -32.718306169776966],
         [151.53388526801132, -32.70949944519641],
         [151.61176792701082, -32.740940566724255],
         [151.58769324042325, -32.7786734798385],
         [151.57610849588642, -32.72333603576524],
         [151.67312515750623, -32.764297338042205],
         [151.5464643920831, -32.8010403307226],
         [151.7318738138854, -32.792055242099906],
         [151.64482770222108, -32.702672561483574],
         [151.6087134427892, -32.6988109799713],
         [151.7796664589762, -32.719474454252975],
         [151.51861284690327, -32.81640193385172],
         [151.55580620879007, -32.732227483265824],
         [151.51897403408864, -32.68021652857842],
         [151.70339799455806, -32.801218694764735],
         [151.59263392439047, -32.71857371584017],
         [151.65767437235604, -32.726568884029],
         [151.52283561560088, -32.69629604697715],
         [151.79610270545922, -32.76115367179952],
         [151.58652495594725, -32.73636106994237],
         [151.4935526989829, -32.72180656410392],
         [151.7315170858011, -32.70096918488117],
         [151.6762688237489, -32.76043575652993],
         [151.5798808953776, -32.731598750017284],
         [151.72010624620535, -32.71911326706763],
         [151.51654828311553, -32.82125343579787],
         [151.5277762995681, -32.81666947991493],
         [151.57844060573737, -32.768787652803034],
         [151.56083607477836, -32.68443929727604],
         [151.6126686654236, -32.790886957623904],
         [151.49435979627359, -32.71408340107934],
         [151.59011899139634, -32.71147928606414],
         [151.7037591817434, -32.72971255027167],
         [151.55472710633512, -32.702944566647844],
         [151.65605571867363, -32.78028767441986],
         [151.79098365744986, -32.79528809036365],
         [151.59245556034833, -32.70087554375905],
         [151.64006538229597, -32.76340105873046],
         [151.73007679616083, -32.71794498259163],
         [151.47549333971645, -32.70105836690223],
         [151.69702148005163, -32.722078569268184],
         [151.54071215172416, -32.818105310454136],
         [151.67779383630918, -32.810203783387436],
         [151.6615359538683, -32.810471329450635],
         [151.54295953865508, -32.81577320060318],
         [151.7336708316099, -32.736628616005575],
         [151.78253812005462, -32.80005041028874],
         [151.71579429548666, -32.786035455677755],
         [151.5970395162313, -32.75639135187444],
         [151.74112644857126, -32.768698470781956],
         [151.69279871135404, -32.78064886160519],
         [151.6933382625815, -32.815951564645324],
         [151.5769155931771, -32.7427375844488],
         [151.71732376714797, -32.79448099307298],
         [151.57610849588642, -32.7177666185495],
         [151.47881982910232, -32.72962336825061]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var uiConsoleModule = require('users/paulhosch/RFSAR:modules/uiConsoleModule');
var visParams = require('users/paulhosch/RFSAR:modules/visParamsModule');
var refinedLee = require('users/paulhosch/RFSAR:modules/refinedLee');//Copyright (c) 2021 SERVIR-Mekong


// List of observation dates
var observationDates = [
  '2021-03-07', '2021-03-12', '2021-03-19', '2021-03-24', 
  '2021-03-31', '2021-04-05', '2021-04-12', '2021-04-17', '2021-04-24', 
  '2021-04-29'
];

var sentinelLayersDict = {
  '2021-03-19': 'sentinel1/nsw/2021_03_19',
  '2021-03-24': 'sentinel1/nsw/2021_03_24',
  '2021-03-25': 'sentinel1/nsw/2021_03_25',
  '2021-03-27': 'sentinel1/nsw/2021_03_27',
  // Add more dates and corresponding layers as needed
};

var aoiDictionary = {
  'AoI': aoiFC,
  'Subset 1': aoiSub1FC,
  'Subset 2': aoiSub2FC,
  'Subset 3': aoiSub3FC,
};

//global scope
var sampleDictionary = {}; 
var currentDrawingLayer = null;
var classifiedCollection;
var postProcessedCollection; 
var groundTruthCollection = ee.ImageCollection([Maitland_2021_03_19_binary, Grafton_2021_03_24_binary]);
print('groundTruthCollection',groundTruthCollection); 


//S1
function addS1ForDate(dateString) {
  var date = ee.Date(dateString);
  var nextDay = date.advance(1, 'day');

  var filteredImages = s1.filter(ee.Filter.listContains("transmitterReceiverPolarisation", "VV"))
                         .filter(ee.Filter.listContains("transmitterReceiverPolarisation", "VH"))
                         .filter(ee.Filter.bounds(aoiFC))
                         .filter(ee.Filter.date(date, nextDay))
                         .mosaic()
                         .clip(aoiFC);

  //   inputMap.addLayer(filteredImages, {min: -25, max: 0}, 'Sentinel-1 on: ' + date.format('YYYY-MM-dd').getInfo(),false);
filteredImages =  refinedLee.refinedLee(filteredImages);
  return filteredImages.set('date',date); 
}

var s1Collection = ee.ImageCollection.fromImages(
  observationDates.map(function(date) {
    return addS1ForDate(date);
  })
);

print('S1 collection: ', s1Collection);




// Bands
var s1WithBands = s1Collection; 

var bandState = {
  VVBand: true,
  VHBand: true, 
  ratioBand: false,
  aspectBand: true,
  slopeBand: true,
  HANDBand: true,
  landCoverBand: true,
};


function addSlopeBand(collection) {
  return collection.map(function(image) {
    var slope = ee.Algorithms.Terrain(DEM).select('slope').rename('slope');
    return image.addBands(slope);
  });
}

function addRatioBand(collection) {
  return collection.map(function(image) {
    var ratioBand = image.select('VV').divide(image.select('VH')).rename('VV/VH');
    return image.addBands(ratioBand);
  });
}

function addAspectBand(collection) {
  return collection.map(function(image) {
    var aspect = ee.Algorithms.Terrain(DEM).select('aspect').rename('aspect');
    return image.addBands(aspect);
  });
}

function addHANDBand(collection) {
  return collection.map(function(image) {
    
    var HAND = meritHydro.select('hnd').rename('HAND');
    return image.addBands(HAND);
  });
}

function addLandCoverBand(collection) {
  return collection.map(function(image) {
    
    var landCover = landCoverDEA.filterDate('2020-01-01','2021-01-01').select('level3').filterBounds(aoiFC).mean().rename('landCover');
    return image.addBands(landCover);
  });
}

function updateCollectionBasedOnBandSelection(collection) {
  var updatedCollection = removeUnwantedBands(collection);

  // Add additional bands based on bandState
  if (bandState.slopeBand) {
    updatedCollection = addSlopeBand(updatedCollection);
  }
  if (bandState.ratioBand) {
    updatedCollection = addRatioBand(updatedCollection);
  }
  if (bandState.aspectBand) {
    updatedCollection = addAspectBand(updatedCollection);
  }
  if (bandState.HANDBand) { 
    updatedCollection = addHANDBand(updatedCollection);
  }
  if (bandState.landCoverBand) { 
    updatedCollection = addLandCoverBand(updatedCollection);
  }


  return updatedCollection;
}

function removeUnwantedBands(collection) {
  return collection.map(function(image) {
    var bandsToKeep = []; 

    if (bandState.VVBand) {
      bandsToKeep.push('VV'); 
    }
    if (bandState.VHBand) {
      bandsToKeep.push('VH'); 
    }
    

    return image.select(bandsToKeep);
  });
}

s1WithBands = updateCollectionBasedOnBandSelection(s1WithBands);

print('s1WithBands',s1WithBands); 





// Legend 




//PopUpPanel
var isPopupCreated = false;
var popupPanel;

function createPopupPanel(contentWidgets) {
  popupPanel = ui.Panel({
    style: {
      padding: '8px',
      width: '100%',
      height: '100%',
      border: '2px solid black',
      stretch: 'vertical',
      margin: 'auto',
      shown: false
    }
  });

  var closePanel = function() {
    popupPanel.style().set('shown', false);
    middlePanel.style().set('shown', true);
    isPopupCreated = false;
  };

  var closeButton = ui.Button({
    label: '❌',
    onClick: closePanel,
    style: { padding: '2px', fontSize: '16px', color: 'black', position: 'top-right'}
  });

  popupPanel.add(closeButton);
  popupPanel.add(contentWidgets);
  isPopupCreated = true;
}

function openPopup(title, contentWidgets) {
  if (!isPopupCreated) {
    createPopupPanel(title, contentWidgets);
    inputMapPanel.add(popupPanel);
  }
  popupPanel.style().set('shown', true);
  middlePanel.style().set('shown', false);
}



/*
var upperInputPanel = ui.Panel({widgets: [sampPan.right],style: {width: '20%' , margin: '15px 0px 40px 5px', border:'4px solid black', backgroundColor: rootBackgroundColor}, layout: ui.Panel.Layout.flow('vertical')});
var upperMiddlePanel = ui.Panel({widgets: [inputMapPanel], layout: ui.Panel.Layout.flow('vertical'), style: {position:'top-right', stretch: 'both', width: '60%', backgroundColor: rootBackgroundColor}});
var upperChartPanel  = ui.Panel({widgets:[ui.Label('Backscatter Histogram Plotting', {fontWeight: 'bold', fontSize: '16px',color: fontColor, backgroundColor: panelBackgroundColor}),selectorsPanel], style: {border:'4px solid black', margin: '15px 5px 40px 0', width: '19%' ,  backgroundColor: panelBackgroundColor}, layout: ui.Panel.Layout.flow('vertical')});
var upperPanel = ui.Panel({widgets: [upperInputPanel, upperMiddlePanel, upperChartPanel], layout: ui.Panel.Layout.flow('horizontal'), style: {stretch: 'horizontal', backgroundColor: rootBackgroundColor}});

var lowerInputPanel = ui.Panel({widgets: [createClassificationUI()],style: {width: '20%' , margin: '40px 0px 0px 5px', border:'4px solid black', backgroundColor: rootBackgroundColor}, layout: ui.Panel.Layout.absolute()});
var lowerChartPanel = ui.Panel({widgets:[ui.Label('Result Plotting', {fontWeight: 'bold', fontSize: '16px', color: fontColor, backgroundColor: panelBackgroundColor}),], style: {border:'4px solid black', margin: '40px 5px 40px 0', width: '19%' , backgroundColor: panelBackgroundColor}, layout: ui.Panel.Layout.flow('vertical')});
var lowerMiddlePanel = ui.Panel({widgets:[resultMapPanel, ],  layout: ui.Panel.Layout.flow('vertical'), style: {position:'top-right', stretch: 'both', width: '60%', backgroundColor: rootBackgroundColor}});
var lowerPanel = ui.Panel({widgets:[lowerInputPanel, lowerMiddlePanel, lowerChartPanel], style: {width: '100%', backgroundColor: rootBackgroundColor }, layout: ui.Panel.Layout.flow('horizontal')});

*/

/***********************************************************************
 *                             UI STYLE                                *
 ***********************************************************************/
var rootBackgroundColor = '#8d8d8d';
var panelBackgroundColor = '#dddddd';
var fontColor = '#424242';

//{border:'4px solid black', margin: '5px', height: '95%', width: '19%' ,  backgroundColor: panelBackgroundColor}

var panelStyle = {
  backgroundColor: panelBackgroundColor,
  padding: '8px',
  stretch: 'both'
};

var rootPanelStyle = {
  backgroundColor: rootBackgroundColor,
  padding: '20px',
  stretch: 'both',
  maxHeight: '1200px',
  margin: '0 auto'
} ;

var invisPanelStyle = {
  backgroundColor: 'rgba(255, 255, 255, 0)',
  stretch: 'horizontal'
};

var textStyle = {
  color: fontColor,
  backgroundColor: panelBackgroundColor,
  fontSize: '1em',
  margin: ' 5px',
  padding: '10px'
};
var textBoxStyle = {
  color: fontColor,
  backgroundColor: panelBackgroundColor,
  width: '90px',
  fontSize: '1em',
  margin: ' 5px',
  padding: '5px'
};

var buttonStyle = {
  margin: '5px auto',
  color: fontColor,
  width: '45%',
  fontSize: '1em',
  backgroundColor: panelBackgroundColor
};

var selectorStyle = {
  margin: '5px auto',
  color: fontColor,
  backgroundColor: panelBackgroundColor,
  fontSize: '1em',
};

var sliderStyle = {
  margin: '5px',
  color: fontColor,
  backgroundColor: panelBackgroundColor,
  fontSize: '1em',
  stretch: 'horizontal'
};

var headerStyle = {
  color:fontColor,
  fontWeight: 'bold', 
  fontSize: '1em',
  margin: '5px', 
  padding: '10px',
  backgroundColor: panelBackgroundColor 
};

var bigHeaderStyle = {
  color: '#4888EF',
  fontWeight: 'bold', 
  fontSize: '1.3em',
  margin: '5px auto', 
  padding: '10px',
  backgroundColor: panelBackgroundColor 
};

var smallHeaderStyle = {
  color: '#4888EF',
  fontWeight: 'bold', 
  fontSize: '1.1em',
  margin: '5px auto', 
  padding: '10px',
  backgroundColor: panelBackgroundColor 
};

var tableHeaderStyle = {
  fontWeight: 'bold', 
   color: fontColor,
  fontSize: '1em',
  margin: '5px auto', 
  backgroundColor: 'rgba(255, 255, 255, 0)',
  
};

var tableOptions = {
  allowHtml: true,
  AlternatingRowStyle: true,
  sortColumn: 'disable'
}; 

var tableStyle = {
            'color': 'white', // Font color
            'background-color': 'Grey', // Background color
            'stretch':'horizontal'
          
}

var seperatorContent = {value: '',style: { margin: '10px auto 10px auto', height: '2px', width: '95%', backgroundColor: '#F4F4F4' }};


/***********************************************************************
 *                             Message                                 *
 ***********************************************************************/
var messageLabel = ui.Label({
  value: '', 
  style: {
    backgroundColor: panelBackgroundColor, 
    padding: 'auto',
    fontSize: '16px',
    fontWeight: 'bold',
   
    margin: 'auto',
    height: '100%'
  }
});

// Global variable to store the interval key
var loadingIntervalKey;

function displayMessage(message, color, loading) {
  // Clear any existing loading animation
  if (loadingIntervalKey !== undefined) {
    ui.util.clearTimeout(loadingIntervalKey);
  }

  // Set the initial message and style
  messageLabel.setValue(message);
  messageLabel.style().set('color', color);

  // Define globe emojis for the animation
  var globeEmojis = [' 🌍 ', ' 🌎 ', ' 🌏 '];
  var currentGlobeIndex = 0;

  // If loading is true, start the loading animation
  if (loading) {
    var loadingMessage = message;
    loadingIntervalKey = ui.util.setInterval(function() {
      // Update the message with the current globe emoji
      messageLabel.setValue(loadingMessage + ' ' + globeEmojis[currentGlobeIndex]);

      // Move to the next globe emoji, looping back to the start if necessary
      currentGlobeIndex = (currentGlobeIndex + 1) % globeEmojis.length;
    }, 500); // Update every 500 milliseconds
  }
}



/***********************************************************************
 *                             MENU                                    *
 ***********************************************************************/

var publicationMapPanel =  ui.Panel({widgets: [], layout: ui.Panel.Layout.flow('horizontal'), style: panelStyle});



var menuPanel = ui.Panel({
  style: {
    
    stretch: 'both',
    margin: 'auto auto auto 0',
    padding: '0',
    backgroundColor: panelBackgroundColor
  },
  layout: ui.Panel.Layout.flow('horizontal')
});

var rightMenuPanel = ui.Panel({
  style: {
    
  
    stretch: 'both',
    margin: ' auto 0 auto auto',
    padding: '0',
   
    backgroundColor: panelBackgroundColor
  },
  layout: ui.Panel.Layout.flow('horizontal')
});

var menuMainPanel = ui.Panel({
  widgets: [menuPanel, messageLabel, rightMenuPanel],
  style: {
    padding:'16px 16px 0 16px',
    margin: '0',
   stretch: 'horizontal',
  
   width: '100%',
    backgroundColor: rootBackgroundColor
  },
  layout: ui.Panel.Layout.flow('horizontal')
});


var currentActiveButton = null;

function createMenuButton(buttonName, leftPanelToShow, middlePanelToShow, rightPanelToShow) {
  var button = ui.Button({
    label: buttonName,
    onClick: function() {
      if (currentActiveButton) {
        currentActiveButton.style().set({
          color: fontColor,
          fontWeight: 'normal',
        });
      }
      button.style().set({
        color: '#4888EF',
        fontWeight: 'bold',
      });
      currentActiveButton = button;

      // Function to manage panel visibility
      function managePanelVisibility(panel, panelToShow, globalPanel) {
        var panelExists = false;
        globalPanel.widgets().forEach(function(widget) {
          if (widget === panel) {
            panelExists = true;
          }
        });

        if (panel && !panelExists) {
          globalPanel.add(panel);
        }

        globalPanel.widgets().forEach(function(widget) {
          widget.style().set('shown', widget === panel && panelToShow);
        });
      }

      // Manage the visibility of each panel
      managePanelVisibility(leftPanelToShow, leftPanelToShow, leftPanel);
      managePanelVisibility(middlePanelToShow, middlePanelToShow, middlePanel);
      managePanelVisibility(rightPanelToShow, rightPanelToShow, rightPanel);
    },
    style: {
      color: fontColor,
      fontSize: '16px',
      fontWeight: 'normal',
      margin: 'auto 0',
    }
  });

  menuPanel.add(button);
}


/***********************************************************************
 *                             UI Panels                               *
 ***********************************************************************/
var leftPanel = ui.Panel({widgets: [], style: rootPanelStyle , layout: ui.Panel.Layout.flow('vertical')});
leftPanel.style().set('width', '20%');

var rightPanel = ui.Panel({widgets:[], style: rootPanelStyle, layout: ui.Panel.Layout.flow('vertical')});
rightPanel.style().set('width', '20%');

var middlePanel = ui.Panel({widgets: [], layout: ui.Panel.Layout.flow('horizontal'), style: rootPanelStyle });
 middlePanel.style().set('width', '60%');
 
var nonMenuPanel = ui.Panel({style:{margin: '0 0 10px 0', width: '100%', stretch: 'both', backgroundColor: rootBackgroundColor}, layout: ui.Panel.Layout.flow('horizontal'), widgets: [leftPanel, middlePanel, rightPanel]});

ui.root.setLayout(ui.Panel.Layout.flow('vertical'));

ui.root.widgets().reset([ menuMainPanel, nonMenuPanel] );

// Assuming these are the globally defined panels
var leftPanel, middlePanel, rightPanel;

function createFullPanelSet(panelType, createSplit) {
  // Create a new left sub-panel
  var newLeftPanel = ui.Panel({
    style: panelStyle,
    layout: ui.Panel.Layout.flow('vertical')
  });

  // Create maps
  var map1 = ui.Map({style: {stretch: 'both', margin: 'auto'}});
  var map2 = ui.Map({style: {stretch: 'both', margin: 'auto'}});

  // Create a legend panel
  var legendPanel = ui.Panel({
    style: { width: '350px', backgroundColor: panelBackgroundColor},
    layout: ui.Panel.Layout.flow('vertical')
  });

  // Initialize newMiddlePanel
  var newMiddlePanel = ui.Panel({
    layout: ui.Panel.Layout.flow('horizontal'),
    style: rootPanelStyle
  });

  if (createSplit) {
    // If true, create a split panel with map1 and map2

    // Link the two maps
    var linker = new ui.Map.Linker([map1, map2]);

    // Create a split panel for the new middle panel
    var splitPanel = ui.SplitPanel({
      firstPanel: map1, 
      secondPanel: map2, 
      wipe: true, 
      orientation: 'vertical'
    });

    // Add splitPanel and legendPanel to the middle panel
    newMiddlePanel.widgets().reset([legendPanel, splitPanel]);

  } else {
    // If false, only add map1 and legendPanel to the middle panel
    map1.style().set('height','100%'); 
    newMiddlePanel.widgets().reset([legendPanel, map1]);
  }
 
  // Create a new right sub-panel
  var newRightPanel = ui.Panel({
    style: panelStyle,
    layout: ui.Panel.Layout.flow('vertical')
  });

  // Return an object containing all new panels and their components
  return {
    left: newLeftPanel,
    middle: newMiddlePanel,
    right: newRightPanel,
    map1: map1,
    map2: createSplit ? map2 : null, // Return map2 only if split panel is created
    legend: legendPanel
  };
}


var tutPan = createFullPanelSet('Tutorial');
var sampPan = createFullPanelSet('Sampling');
var clasPan = createFullPanelSet('Classification', true);
var postPan = createFullPanelSet('Post-Processing',true);
var valPan = createFullPanelSet('Validation', true);


/***********************************************************************
 *                             Legend                                  *
 ***********************************************************************/
 
function createLayerVisibilityCheckbox(panel, labelText, layer, min, max, palette, unit, useGradient) {
  // Checkbox
  var checkbox = ui.Checkbox({
    label: labelText + '   ' + unit,
    style: textStyle ,
    onChange: function(checked) {
      layer.setShown(checked);
    },
    value: false // Initially unchecked
  });

  
 
// Main panel combining the checkbox and the min-max panel
  var combinedPanel = ui.Panel({
    widgets: [checkbox],
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {
      stretch: 'horizontal',
      backgroundColor: panelBackgroundColor,
      margin: 'auto 0',
      padding: '0'
     // margin: 'auto 5px' 
    }
  });
  if (useGradient) {
     // Color boxes panel or gradient
  var gradientPanel = ui.Panel({
      layout: ui.Panel.Layout.flow('horizontal'),
      style: {
        margin: 'auto',
        stretch: 'horizontal',
        backgroundColor: panelBackgroundColor
      }
    });
  
    var size =  [100, 10];

  var image = ee.Image.pixelLonLat().select(0)
    .clip(ee.Geometry.Rectangle({ coords: [[0, 0], size], geodesic: false }))
    .visualize({ min: 0, max: 100, palette: palette });

  var thumb = ui.Thumbnail({ 
    image: image, 
    style: {width: '90px' , height:'15px' , padding: '0px', margin: 'auto 5px'} 
  });
    
    // Min label
  var minLabel = ui.Label(min , {
    margin: 'auto 5px',
    textAlign: 'center',
    //padding: '5px',
     backgroundColor: panelBackgroundColor,  color: fontColor
  });

    // Max label
  var maxLabel = ui.Label(max , {
    margin: 'auto 5px',
    textAlign: 'center',
    // padding: '5px',
    backgroundColor: panelBackgroundColor, color: fontColor
  });


combinedPanel.setLayout(ui.Panel.Layout.flow('horizontal'));
gradientPanel.add(minLabel);
    gradientPanel.add(thumb);
    gradientPanel.add(maxLabel);
combinedPanel.add(gradientPanel);
    
  } else {
     // Color boxes panel or gradient
 var colorBoxesPanel = ui.Panel({
      layout: ui.Panel.Layout.flow('vertical'),
      style: {
        margin: 'auto',
        stretch: 'both',
        backgroundColor: panelBackgroundColor
      }
    });
  
    Object.keys(palette).forEach(function(color) {
      var labelPanel = ui.Panel({
        layout: ui.Panel.Layout.flow('horizontal'),
        style: { stretch: 'horizontal', backgroundColor: panelBackgroundColor }
      });

      var colorLabel = ui.Label('', {
        backgroundColor: color,
        padding: '8px',
        margin: 'auto auto auto 5px',
         stretch: 'horizontal',
        width: '30px'
      });

      var textLabel = ui.Label(palette[color], {
        margin: 'auto 5px auto auto  ',
        //textAlign: 'center',
        stretch: 'horizontal',
        padding: ' 5px',
        backgroundColor: panelBackgroundColor, color: fontColor
      });
      combinedPanel.setLayout(ui.Panel.Layout.flow('vertical'));
      labelPanel.add(colorLabel);
      labelPanel.add(textLabel);
      colorBoxesPanel.add(labelPanel);
    });
    combinedPanel.add(colorBoxesPanel);
  }


  // Add the combined panel to the specified panel
  panel.add(combinedPanel);
}

function addStaticLegendEntry(panel, labelText, lineStyle, color) {
  var visualIndicator;

  if (lineStyle === 'colorbox') {
    // Create a color box
    visualIndicator = ui.Label('', {
      backgroundColor: color,
      padding: '8px',
      margin: 'auto 5px',
      width: '40px',
      height: '20px',
    });
  } else {
    // Create a line visual indicator
    var borderString = '3px ' + lineStyle + ' ' + color;
    visualIndicator = ui.Label('', {
      backgroundColor: panelBackgroundColor,
      padding: '2px',
      margin: 'auto 5px',
      width: '40px',
      height: '20px',
      border: borderString
    });
  }

  // Create a panel for the legend entry
  var legendEntry = ui.Panel({
    layout: ui.Panel.Layout.flow('horizontal'),
    style: { backgroundColor: panelBackgroundColor,}
  });

  // Create the text label
  var textLabel = ui.Label(labelText, textStyle);

  // Add the text label and visual indicator to the legend entry
  
  legendEntry.add(visualIndicator);
legendEntry.add(textLabel);

  // Add the legend entry to the specified panel
  panel.add(legendEntry);
}

/***********************************************************************
 *                             Maps                                    *
 ***********************************************************************/
 
 function addLayerAndCreateCheckbox(mapPanel, legendPanel, layerName, layer, visParams, labelSuffix, palette, isContinuous) {
  // Add the layer to the map
  var layerToAdd = ui.Map.Layer(layer, visParams, layerName, false);
  mapPanel.add(layerToAdd);

  // Create the checkbox in the legend
  createLayerVisibilityCheckbox(legendPanel, layerName, layerToAdd, visParams.min, visParams.max, palette, labelSuffix, isContinuous);
}
function hillshade(image) {
  var weight = 0.7
  var extrusion = 5
  var sunAzimuth = 315
  var sunElevation = 35
  var contrast = 0.1
  var brightness = 0
  var saturation = 0.85

  return utils.hillshadeRGB(image, demALOS, weight, extrusion, sunAzimuth, sunElevation, contrast, brightness, saturation)
}
var demALOS = ee.Image("JAXA/ALOS/AW3D30/V2_2").select('AVE_DSM');

var perula = ['#352A87', '#056EDE', '#089BCE', '#33B7A0', '#A3BD6A', '#F9BD3F', '#F9FB0E'];
var perulaReversed = ['#F9FB0E', '#F9BD3F', '#A3BD6A', '#33B7A0', '#089BCE', '#056EDE', '#352A87'];

var darkMapStyle = {
  'Dark': [
    { 'elementType': 'labels', 'stylers': [ { 'visibility': 'off' } ] },
    { 'elementType': 'geometry', 'stylers': [ { 'color': panelBackgroundColor } ] },
    { 'featureType': 'landscape.man_made', 'elementType': 'geometry', 'stylers': [{ 'color': '#a9a9a9' }] },
    { 'featureType': 'water', 'stylers': [ { 'color': rootBackgroundColor } ] }
  ]
};
var infoDarkMapStyle = {
  'Info': [
    { 'elementType': 'labels', 'stylers': [ { 'visibility': 'off' } ] },
    { 'elementType': 'geometry', 'stylers': [ { 'color': 'DarkGrey' } ] },
    
    { 'featureType': 'landscape.man_made', 'elementType': 'geometry', 'stylers': [{ 'color': '#9a9a9a' }] },
    { 'featureType': 'water', 'stylers': [ { 'color': rootBackgroundColor } ] },
    { 'featureType': 'road', 'elementType': 'geometry', 'stylers': [ { 'color': 'DarkGrey' } ] },
    { 'featureType': 'poi', 'elementType': 'labels', 'stylers': [ { 'visibility': 'off' } ] },
    { 'featureType': 'natural', 'elementType': 'labels', 'stylers': [ { 'visibility': 'off' } ] }
]

};



//=================================================
// classification Map
//=================================================

clasPan.map1.setOptions('Dark', darkMapStyle, ['Dark', 'ROADMAP', 'SATELLITE', 'HYBRID', 'TERRAIN']);
clasPan.map2.setOptions('Dark', darkMapStyle, ['Dark', 'ROADMAP', 'SATELLITE', 'HYBRID', 'TERRAIN']);

//Base Layers
clasPan.legend.add(ui.Label('Static Base Layers', smallHeaderStyle));
addStaticLegendEntry(clasPan.legend, 'Top Level AoI', 'solid', 'yellow');
addStaticLegendEntry(clasPan.legend, 'Subset AoI', 'dashed', 'yellow');
addStaticLegendEntry(clasPan.legend, 'DEA WOS water w/> 30 % occurence', 'colorbox', '#2888b5');

var aoiLineWidth = 16;
clasPan.map1.add(ui.Map.FeatureViewLayer(aoiFV.getAssetId()).setVisParams({polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: 100}).setName('AoI')); 
clasPan.map2.add(ui.Map.FeatureViewLayer(aoiFV.getAssetId()).setVisParams({polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: 100}).setName('AoI')); 


clasPan.map1.add(ui.Map.FeatureViewLayer(aoiSub1FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed', polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: 3}).setName('Subset 1')); 
clasPan.map2.add(ui.Map.FeatureViewLayer(aoiSub1FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed', polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: 3}).setName('Subset 1')); 


clasPan.map1.add(ui.Map.FeatureViewLayer(aoiSub2FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed',polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: 3}).setName('Subset 2')); 
clasPan.map2.add(ui.Map.FeatureViewLayer(aoiSub2FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed',polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: 3}).setName('Subset 2')); 


clasPan.map1.add(ui.Map.FeatureViewLayer(aoiSub3FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed', polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: 3}).setName('Subset 3')); 
clasPan.map2.add(ui.Map.FeatureViewLayer(aoiSub3FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed', polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: 3}).setName('Subset 3')); 


clasPan.map2.add(ui.Map.FeatureViewLayer(DEA_WOS_waterOver30FV.getAssetId()).setVisParams({ polygonFillColor: '#2888b5', polygonFillOpacity: 1}).setName('DEA WOS water w/> 30 % occurence')); 
clasPan.map1.add(ui.Map.FeatureViewLayer(DEA_WOS_waterOver30FV.getAssetId()).setVisParams({ polygonFillColor: '#2888b5', polygonFillOpacity: 1}).setName('DEA WOS water w/> 30 % occurence')); 

//Terrain
var elevationVisParams = {min:-10, max:1000, palette:['023858', '006837', '1a9850', '66bd63', 'a6d96a', 'd9ef8b', 'ffffbf', 'fee08b', 'fdae61', 'f46d43', 'd73027']};
var aspectVisParams = {min:0, max:359, palette:perula};
var slopeVisParams = {min: 0, max: 6, palette: perula};
var handVisParams = {min: 0, max: 200, palette: perula};
var landCoverVisParams = {palette:["#4aa02c", "#54c571", "#306eff", "#e6e6fa", "#5c3317", "#0020c2"]};

var elevation = DEM.clip(aoiFC.geometry()).select('elevation');
var slope = ee.Algorithms.Terrain(DEM).select('slope').clip(aoiFC);
var aspect = ee.Algorithms.Terrain(DEM).select('aspect').clip(aoiFC);
var hand = meritHydro.select('hnd').clip(aoiFC);
var landCover = landCoverDEA.filterDate('2020-01-01', '2021-01-01').filterBounds(aoiFC).select('level3');

clasPan.legend.add(ui.Label('Terrain Layers (computed)', smallHeaderStyle));
addLayerAndCreateCheckbox(clasPan.map1, clasPan.legend, 'Elevation', elevation, elevationVisParams, '[m]', ['023858', '006837', '1a9850', '66bd63', 'a6d96a', 'd9ef8b', 'ffffbf', 'fee08b', 'fdae61', 'f46d43', 'd73027'], true);
addLayerAndCreateCheckbox(clasPan.map1, clasPan.legend, 'Aspect', aspect, aspectVisParams, '[°]', perula, true);
addLayerAndCreateCheckbox(clasPan.map1, clasPan.legend, 'Slope', slope, slopeVisParams, '[°]', perula, true);
addLayerAndCreateCheckbox(clasPan.map1, clasPan.legend, 'HAND',hand, handVisParams, '[m]', perula, true);
addLayerAndCreateCheckbox(clasPan.map1, clasPan.legend, 'Land Cover',landCover , landCoverVisParams, '[-]', {"#4aa02c":'CTV',"#54c571":'NTV',"#306eff":'NAV',"#e6e6fa":'AS',"#5c3317":'NS',"#0020c2":'Water'}, false);

//Senitinel-1
var s1Layer_2021_03_19 = ui.Map.CloudStorageLayer('tfmt', 'sentinel1/nsw/2021_03_19', 13).setName('VH on 2021-03-19').setShown(false); 
var s1Layer_2021_03_24 = ui.Map.CloudStorageLayer('tfmt', 'sentinel1/nsw/2021_03_24', 12).setName('VH on 2021-03-24').setShown(false);
var s1Layer_2021_03_25 = ui.Map.CloudStorageLayer('tfmt', 'sentinel1/nsw/2021_03_25', 15).setName('VH on 2021-03-25').setShown(false);
var s1Layer_2021_03_27 = ui.Map.CloudStorageLayer('tfmt', 'sentinel1/nsw/2021_03_27', 14).setName('VH on 2021-03-27').setShown(false);

clasPan.map1.add(s1Layer_2021_03_19);
clasPan.map1.add(s1Layer_2021_03_24);
clasPan.map1.add(s1Layer_2021_03_25);
clasPan.map1.add(s1Layer_2021_03_27);

clasPan.legend.add(ui.Label('Sentinel-1 Layers (cloudstorage)', smallHeaderStyle));
createLayerVisibilityCheckbox(clasPan.legend, 'VH on 2021-03-19', s1Layer_2021_03_19, '-25', '0', ['#000000', '#FFFFFF'], '[dB]', true);
createLayerVisibilityCheckbox(clasPan.legend, 'VH on 2021-03-24', s1Layer_2021_03_24, '-25', '0', ['#000000', '#FFFFFF'], '[dB]', true);
createLayerVisibilityCheckbox(clasPan.legend, 'VH on 2021-03-25', s1Layer_2021_03_25, '-25', '0', ['#000000', '#FFFFFF'], '[dB]', true);
createLayerVisibilityCheckbox(clasPan.legend, 'VH on 2021-03-27', s1Layer_2021_03_27, '-25', '0', ['#000000', '#FFFFFF'], '[dB]', true); 



//=================================================
// Validation Map
//=================================================

valPan.map1.setOptions('Dark', darkMapStyle, ['Dark', 'ROADMAP', 'SATELLITE', 'HYBRID', 'TERRAIN']);
valPan.map2.setOptions('Dark', darkMapStyle, ['Dark', 'ROADMAP', 'SATELLITE', 'HYBRID', 'TERRAIN']);

//Base Layers
valPan.legend.add(ui.Label('Static Base Layers', smallHeaderStyle));
addStaticLegendEntry(valPan.legend, 'Top Level AoI', 'solid', 'yellow');
addStaticLegendEntry(valPan.legend, 'Subset AoI', 'dashed', 'yellow');
addStaticLegendEntry(valPan.legend, 'DEA WOS water w/> 30 % occurence', 'colorbox', '#2888b5');

valPan.map1.add(ui.Map.FeatureViewLayer(aoiFV.getAssetId()).setVisParams({polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: 3}).setName('AoI')); 
valPan.map2.add(ui.Map.FeatureViewLayer(aoiFV.getAssetId()).setVisParams({polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: 3}).setName('AoI')); 


valPan.map1.add(ui.Map.FeatureViewLayer(aoiSub1FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed', polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: aoiLineWidth}).setName('Subset 1')); 
valPan.map2.add(ui.Map.FeatureViewLayer(aoiSub1FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed', polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: aoiLineWidth}).setName('Subset 1')); 


valPan.map1.add(ui.Map.FeatureViewLayer(aoiSub2FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed',polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: aoiLineWidth}).setName('Subset 2')); 
valPan.map2.add(ui.Map.FeatureViewLayer(aoiSub2FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed',polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: aoiLineWidth}).setName('Subset 2')); 


valPan.map1.add(ui.Map.FeatureViewLayer(aoiSub3FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed', polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: aoiLineWidth}).setName('Subset 3')); 
valPan.map2.add(ui.Map.FeatureViewLayer(aoiSub3FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed', polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: aoiLineWidth}).setName('Subset 3')); 


valPan.map2.layers().set(10, ui.Map.FeatureViewLayer(DEA_WOS_waterOver30FV.getAssetId()).setVisParams({ polygonFillColor: '#2888b5', polygonFillOpacity: 1}).setName('DEA WOS water w/> 30 % occurence')); 
valPan.map1.add(ui.Map.FeatureViewLayer(DEA_WOS_waterOver30FV.getAssetId()).setVisParams({ polygonFillColor: '#2888b5', polygonFillOpacity: 1}).setName('DEA WOS water w/> 30 % occurence')); 

//=================================================
// Sampling Map
//=================================================

sampPan.map1.setOptions('Dark', darkMapStyle, ['Dark', 'ROADMAP', 'SATELLITE', 'HYBRID', 'TERRAIN']);

//Base Layers
sampPan.legend.add(ui.Label('Static Base Layers', smallHeaderStyle));
addStaticLegendEntry(sampPan.legend, 'Top Level AoI', 'solid', 'yellow');
addStaticLegendEntry(sampPan.legend, 'Subset AoI', 'dashed', 'yellow');
addStaticLegendEntry(sampPan.legend, 'DEA WOS water w/> 30 % occurence', 'colorbox', '#2888b5');

/*
sampPan.map1.add(ui.Map.FeatureViewLayer(aoiFV.getAssetId()).setVisParams({polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: 3}).setName('AoI')); 


sampPan.map1.add(ui.Map.FeatureViewLayer(aoiSub1FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed', polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: aoiLineWidth}).setName('Subset 1')); 


sampPan.map1.add(ui.Map.FeatureViewLayer(aoiSub2FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed',polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: aoiLineWidth}).setName('Subset 2')); 

sampPan.map1.add(ui.Map.FeatureViewLayer(aoiSub3FV.getAssetId()).setVisParams({polygonStrokeType: 'dashed', polygonStrokeColor: 'yellow', polygonFillOpacity: 0, lineWidth: aoiLineWidth}).setName('Subset 3')); 

sampPan.map1.add(ui.Map.FeatureViewLayer(DEA_WOS_waterOver30FV.getAssetId()).setVisParams({ polygonFillColor: '#2888b5', polygonFillOpacity: 1}).setName('DEA WOS water w/> 30 % occurence')); 

sampPan.map1.add(Bulahdelah_2021_03_19_floodedAreaFV.setVisParams({ polygonFillColor: 'blue', polygonFillOpacity: 1,  }).setName('Bulahdelah_2021_03_19_floodedAreaFV')); 
sampPan.map1.add(Maitland_2021_03_19_floodedAreaFV.setVisParams({ polygonFillColor: 'blue', polygonFillOpacity: 1, }).setName('Maitland_2021_03_19_floodedAreaFV')); 
sampPan.map1.add(Grafton_2021_03_24_floodedAreaFV.setVisParams({ polygonFillColor: 'blue', polygonFillOpacity: 1, }).setName('Grafton_2021_03_24_floodedAreaFV')); 
*/


/***********************************************************************
 *                             Tutorial                                *
 ***********************************************************************/

// Define the style for the tutorial panel and labels

var headerStyle = smallHeaderStyle;
var textStyle = textStyle;



// Add content to the tutorial panel
tutPan.left.add(ui.Label('Tutorial ', bigHeaderStyle));
tutPan.left.add(ui.Label(seperatorContent));

// Step 1
tutPan.left.add(ui.Label('Step 1: Import Area of Interest (AoI) Assets', headerStyle));
tutPan.left.add(ui.Label('1. Importing Shapefiles: Begin by importing your AoI as shapefile assets into the Google Earth Engine Code Editor. You need two types of assets for each AoI: a Feature Collection for computations and a Feature View Layer for visualization.', textStyle));
tutPan.left.add(ui.Label('2. Naming Convention: Follow the naming convention strictly. For example, Top Level AoI: aoiFC (Feature Collection) and aoiFV (Feature View Layer); Subset 1: aoiSub1FC and aoiSub1FV; and so on.', textStyle));

// Step 2
tutPan.left.add(ui.Label('Step 2: Create and Upload Sample Data', headerStyle));
tutPan.left.add(ui.Label('1. Sampling Menu Section: Navigate to the Sampling Menu section in your application.', textStyle));
tutPan.left.add(ui.Label('2. Uploading Data: Upload your training and testing sample points.', textStyle));
tutPan.left.add(ui.Label('3. Storing Samples: Store these points in the sampleDictionary for later use in the classification process.', textStyle));

// Step 3
tutPan.left.add(ui.Label('Step 3: Classification Using Random Forest Algorithm', headerStyle));
tutPan.left.add(ui.Label('1. Configuring Classifier: In the Random Forest Classifier menu section, add input features and configure the Random Forest algorithm parameters.', textStyle));
tutPan.left.add(ui.Label('2. Running Classifier: Execute the classifier to generate the initial flood mapping results.', textStyle));

// Step 4
tutPan.left.add(ui.Label('Step 4: Post-Processing of Classification Results', headerStyle));
tutPan.left.add(ui.Label('1. Post-Processing Menu: Go to the Post-Processing menu section of your application.', textStyle));
tutPan.left.add(ui.Label('2. Applying Masks: Apply various masks and filters to refine the raw classification results. This includes water body masking, slope filtering, and connectivity filtering.', textStyle));

// Additional Notes
tutPan.left.add(ui.Label('Additional Notes:', headerStyle));
tutPan.left.add(ui.Label('Ensure that the AoI assets are correctly formatted and named as per the naming convention for seamless integration with the application.', textStyle));
tutPan.left.add(ui.Label('Each step builds upon the previous one, so it\'s important to follow the sequence outlined in this tutorial.', textStyle));


createMenuButton('Tutorial', tutPan.left, tutPan.middle, tutPan.right);

/***********************************************************************
 *                             SAMPLING                                *
 ***********************************************************************/
 
 var drawingTools = sampPan.map1.drawingTools();
drawingTools.setLinked(true).setDrawModes(['point']);



//=================================================
// functions
//=================================================

function loadAndAddFeatureCollection(collectionId, selectedDate) {
  var featureCollection = ee.FeatureCollection(collectionId);
  var floodedCollection = featureCollection.filter(ee.Filter.eq('class', 1));
  var nonFloodedCollection = featureCollection.filter(ee.Filter.eq('class', 0));
  print('floodedCollection', floodedCollection);
  print('nonFloodedCollection', nonFloodedCollection);
  
  addFeatureCollectionAsLayer(floodedCollection, selectedDate, true);
  addFeatureCollectionAsLayer(nonFloodedCollection, selectedDate, false);
}

function buildGeometryListFromFeatures(featureCollection) {
  return featureCollection.toList(featureCollection.size()).map(function(feature) {
    return ee.Feature(feature).geometry();
  });
}

function addFeatureCollectionAsLayer(collection, date, isFlooded) {
  var geometries = buildGeometryListFromFeatures(collection);
  var layerName = (isFlooded ? 'F_' : 'NF_') + date.replace(/-/g, '');
  var color = isFlooded ? 'cyan' : 'green';
  var layers = drawingTools.layers();
  var existingLayer = null;
  layers.forEach(function(layer) {
    if (layer.getName() === layerName) {
      existingLayer = layer;
    }
  });
  var newLayer;
  geometries.evaluate(function(geometriesArray) {
    if (existingLayer && keepExistingPointsCheckbox.getValue()) {
      var existingGeometriesList = existingLayer.geometries();
      var existingGeometriesArray = existingGeometriesList.getJsArray();
      var mergedGeometries = existingGeometriesArray.concat(geometriesArray);
      newLayer = ui.Map.GeometryLayer({geometries: mergedGeometries, name: layerName, color: color});
      layers.remove(existingLayer);
    } else {
      newLayer = ui.Map.GeometryLayer({geometries: geometriesArray, name: layerName, color: color});
      if (existingLayer) {
        layers.remove(existingLayer);
      }
    }
    layers.add(newLayer);
  });
}

function updateDateDropdown(dates) {
  if (dates && dates.length > 0) {
    dateDropdown.items().reset(dates);
    dateDropdown.setDisabled(false);
  } else {
    dateDropdown.items().reset(['No dates available']);
    dateDropdown.setDisabled(true);
  }
}

function getOrCreateLayerByDate(date, isFlooded) {
  var layers = drawingTools.layers();
  var prefix = isFlooded ? 'F_' : 'NF_';
  var layerName = prefix + date.replace(/-/g, '');
  var existingLayer = layers.filter(function(layer) {
    return layer.getName() === layerName;
  });
  if (existingLayer.length === 0) {
    var color = isFlooded ? '#05f4fc' : '#00f50c';
    var newLayer = ui.Map.GeometryLayer({geometries: [], name: layerName, color: color});
    layers.add(newLayer);
    return newLayer;
  }
  return existingLayer[0];
}

function updateDrawingLayer(checked, isFlooded) {
  var date = dateDropdown.getValue();
  if (checked) {
    (isFlooded ? nonFloodedCheckbox : floodedCheckbox).setValue(false);
    currentDrawingLayer = getOrCreateLayerByDate(date, isFlooded);
    drawingTools.setSelected(currentDrawingLayer).setShape('point');
    sampPan.map1.setControlVisibility({drawingToolsControl: true});
  } else {
    drawingTools.setShape(null);
    sampPan.map1.setControlVisibility({drawingToolsControl: false});
  }
}

function createTrainingDataDict() {
  var layers = drawingTools.layers();
  var layerNamePattern = /^(F_|NF_)(\d{4})(\d{2})(\d{2})$/;
  var validationPercentage = parseFloat(validationPercentageInput.getValue()) / 100;
  layers.forEach(function(layer) {
    var layerName = layer.getName();
    var matches = layerNamePattern.exec(layerName);
    if (matches && matches.length === 5) {
      var formattedDateStr = matches[2] + '-' + matches[3] + '-' + matches[4];
      sampleDictionary[formattedDateStr] = ee.FeatureCollection([]);
    }
  });
  layers.forEach(function(layer) {
    var layerName = layer.getName();
    var matches = layerNamePattern.exec(layerName);
    if (matches && matches.length === 5) {
      var formattedDateStr = matches[2] + '-' + matches[3] + '-' + matches[4];
      var isFlooded = matches[1] === 'F_';
      var layerGeometry = layer.toGeometry();
      var classValue = isFlooded ? 1 : 0;
      var coordinates = layerGeometry.coordinates();
      var features = ee.FeatureCollection(coordinates.map(function(coord) {
        return ee.Feature(ee.Geometry.Point(coord), {'class': classValue});
      })).randomColumn('random');
      var trainingPoints = features.filter(ee.Filter.lt('random', 1 - validationPercentage))
                                   .map(function(feature) { return feature.set('isValidation', 0); });
      var validationPoints = features.filter(ee.Filter.gte('random', 1 - validationPercentage))
                                     .map(function(feature) { return feature.set('isValidation', 1); });
      var mergedFeatures = trainingPoints.merge(validationPoints);
   
      if (formattedDateStr in sampleDictionary) {
        sampleDictionary[formattedDateStr] = sampleDictionary[formattedDateStr].merge(mergedFeatures);
      } else {
        sampleDictionary[formattedDateStr] = mergedFeatures;
      }
    }
  });
  print('Updated sampleDictionary', sampleDictionary);
}

function exportToAsset(geometryDict, assetFolder) {
  Object.keys(geometryDict).forEach(function(date) {
    var featureCollection = ee.FeatureCollection(geometryDict[date]);
    featureCollection = featureCollection.map(function(feature) {
      return feature.set('date', date);
    });
    Export.table.toAsset({
      collection: featureCollection,
      description: 'Exported_' + date,
      assetId: assetFolder + '/' + 'Exported_' + date
    });
  });
  displayMessage('Export tasks created. Please check the "Tasks" tab to start the export.', 'green');
  print('Export tasks created. Please check the "Tasks" tab to start the export.');
}

function createOrUpdateTrainingDataTable(sampleDictionary) {

  var dataTable = [['Date', 'Training Flooded', 'Training Non-flooded', 'Validation Flooded', 'Validation Non-flooded']];
  displayMessage('Updating Sample Dictionary, please wait ...', 'white', true);
  Object.keys(sampleDictionary).forEach(function(date) {
    var featureCollection = sampleDictionary[date];
    var floodedTrainingCount = featureCollection.filter(ee.Filter.eq('class', 1)).filter(ee.Filter.eq('isValidation', 0)).size();
    var nonFloodedTrainingCount = featureCollection.filter(ee.Filter.eq('class', 0)).filter(ee.Filter.eq('isValidation', 0)).size();
    var floodedValidationCount = featureCollection.filter(ee.Filter.eq('class', 1)).filter(ee.Filter.eq('isValidation', 1)).size();
    var nonFloodedValidationCount = featureCollection.filter(ee.Filter.eq('class', 0)).filter(ee.Filter.eq('isValidation', 1)).size();
    ee.Dictionary({
      floodedTraining: floodedTrainingCount, 
      nonFloodedTraining: nonFloodedTrainingCount,
      floodedValidation: floodedValidationCount,
      nonFloodedValidation: nonFloodedValidationCount
    }).evaluate(function(counts) {
      dataTable.push([date, counts.floodedTraining, counts.nonFloodedTraining, counts.floodedValidation, counts.nonFloodedValidation]);
      displayMessage('Training Data Dict updated.', 'green');
      if (dataTable.length === Object.keys(sampleDictionary).length + 1) {
        if (!trainingDataTable) {
          trainingDataTable = ui.Chart(dataTable).setChartType('Table').setOptions(tableOptions);
          //trainingDataTable.style().set(tableStyle);
        
          trainingDataTablePanel.add(trainingDataTable);
        } else {
            trainingDataTable.setDataTable(dataTable);
        }
      }
    });
  });
}

function removeLayerByName(layerName) {
  var layers = sampPan.map1.layers();
  var layerCount = layers.length();
  for (var i = layerCount - 1; i >= 0; i--) {
    var layer = layers.get(i);
    if (layer.getName() === layerName) {
      layers.remove(layer);
      print('Removed existing layer:', layerName);
      break;
    }
  }
}

var changeImage;
var selectedChangeDetectionDate;

function detectChanges() {
  var date1 = compDateSelector.getValue();
  
  var date2 = dateDropdown.getValue();
  
  selectedChangeDetectionDate = date2;
  if (date1 && date2) {
    removeLayerByName('Change Image');
    var image1 = s1Collection.filter(ee.Filter.eq('date', ee.Date(date1))).first().select('VH');
    var image2 = s1Collection.filter(ee.Filter.eq('date', ee.Date(date2))).first().select('VH');
    var smoothing_radius = 50;
    var before_filtered = image1.focal_mean(smoothing_radius, 'circle', 'meters');
    var after_filtered = image2.focal_mean(smoothing_radius, 'circle', 'meters');
    var difference = after_filtered.divide(before_filtered);
    var threshold = 1;
    var binaryChangeMask = difference.gt(threshold);
    var connections = binaryChangeMask.connectedPixelCount();
    var connectedMask = binaryChangeMask.where(connections.lt(8), 0);
    var DEM = ee.Image('WWF/HydroSHEDS/03VFDEM');
    var terrain = ee.Algorithms.Terrain(DEM);
    var slope = terrain.select('slope');
    changeImage = connectedMask.where(slope.gte(3), 0);
    print('changeImage', changeImage);
    var changeLayer = ui.Map.Layer(changeImage, {min: 0, max: 1, palette: ['green', 'red']}, 'Change Image' );
    sampPan.map2.add(changeLayer);
    createLayerVisibilityCheckbox(sampPan.legend, 'Backscatter Change', changeLayer, '0', '1', {'green':'under threshold', 'red':'over threshold'}, '');
    print('Displaying change image for dates:', date1, 'and', date2);
    displayMessage(ee.String('Displaying change image for dates:', date1, 'and', date2),'green');
    
  } else {
    print('Please select both dates.');
    displayMessage('Please select both dates.', 'Coral');
  }
}

function getDrawingLayerByName(layers, layerName) {
  for (var i = 0; i < layers.length(); i++) {
    var layer = layers.get(i);
    if (layer.getName() === layerName) {
      return layer;
    }
  }
  return null;
}

function removeChangedSamples() {
  var layers = drawingTools.layers();
  var floodedLayerName = 'F_' + selectedChangeDetectionDate.replace(/-/g, '');
  var nonFloodedLayerName = 'NF_' + selectedChangeDetectionDate.replace(/-/g, '');
  print('selectedChangeDetectionDate',selectedChangeDetectionDate);
  var floodedLayer = getDrawingLayerByName(layers, floodedLayerName);
  var nonFloodedLayer = getDrawingLayerByName(layers, nonFloodedLayerName);
  if (floodedLayer) {
    updateLayerWithUnchangedPoints(floodedLayer, changeImage, floodedLayerName);
  }
  if (nonFloodedLayer) {
    updateLayerWithUnchangedPoints(nonFloodedLayer, changeImage, nonFloodedLayerName);
  }
}

function updateLayerWithUnchangedPoints(layer, changeImage, layerName) {
  var points = layer.getEeObject();
  var pointsFeatureCollection = ee.FeatureCollection(points.coordinates().map(function(coord) {
    var point = ee.Geometry.Point(coord);
    var changeValue = changeImage.reduceRegion({
      reducer: ee.Reducer.first(),
      geometry: point,
      scale: 10
    }).get('VH');
    return ee.Feature(point, {change: changeValue});
  }));
  var remainingPoints = pointsFeatureCollection.filter(ee.Filter.neq('change', 1));
  var removedPoints = pointsFeatureCollection.filter(ee.Filter.eq('change', 1));
  var remainingGeometry = remainingPoints.geometry();
  remainingGeometry.evaluate(function(geometry) {
    if (geometry) {
      layer.fromGeometry(ee.Geometry.MultiPoint(geometry.coordinates));
    }
  });
  var removedGeometries = removedPoints.geometry().coordinates().map(function(coord) {
    return ee.Geometry.Point(coord);
  });
  removedGeometries.evaluate(function(geometries) {
    if (geometries.length > 0) {
      drawingTools.addLayer(geometries, 'removed_' + layer.getName(), 'red', true, false);
    }
  });
  removedPoints.size().evaluate(function(size) {
    print('Removed ' + size + ' changed points from layer: ' + layer.getName());
    displayMessage(ee.String('Removed ' + size + ' changed points from layer: ' + layer.getName()), 'green');
  });
}


//=================================================
// UI
//=================================================

sampPan.left.add( ui.Label({value: 'Choose a date with SAR coverage on which to sample',style: headerStyle}));

var dateDropdown = ui.Select({
    items: ['Loading dates...'],
    placeholder: 'select date',
    style: selectorStyle,
  });

sampPan.left.add(dateDropdown); 
sampPan.left.add(ui.Label(seperatorContent));
sampPan.left.add( ui.Label({value: 'Import Sample Collection from Assets',style: headerStyle}));

var featureCollectionInput = ui.Textbox({ placeholder: 'Enter AssetID (should be a Feature Collection with class 0/1)',style: { stretch: 'horizontal' }});
sampPan.left.add(featureCollectionInput);

var loadCollectionButton = ui.Button({ label: 'Load Collection', style: buttonStyle,
  onClick: function() {   loadAndAddFeatureCollection(featureCollectionInput.getValue(), dateDropdown.getValue());
  }
});

var keepExistingPointsCheckbox = ui.Checkbox({label: 'Retain existing points',value: true, style: { color: fontColor, backgroundColor: panelBackgroundColor}});

sampPan.left.add( ui.Panel({widgets: [keepExistingPointsCheckbox, loadCollectionButton], layout: ui.Panel.Layout.flow('horizontal'), style: panelStyle }));
 
sampPan.left.add(ui.Label(seperatorContent));
sampPan.left.add( ui.Label({value: 'Manualy create or modify Samples',style: headerStyle}));

var floodedCheckbox = ui.Checkbox({label: 'Flooded',style:textStyle, value: false, onChange: function(checked) { updateDrawingLayer(checked, true); }});

var nonFloodedCheckbox = ui.Checkbox({label: 'Non-Flooded',style:textStyle, value: false, onChange: function(checked) { updateDrawingLayer(checked, false); }});

sampPan.left.add( ui.Panel({widgets:[ui.Label('Choose Class to edit: ', textStyle), floodedCheckbox, nonFloodedCheckbox], layout: ui.Panel.Layout.flow('horizontal'), style: panelStyle}));
sampPan.left.add(ui.Label(seperatorContent));
sampPan.left.add( ui.Label({value: 'Reuse samples created on proximate days by change filtering', style: headerStyle}));

var compDateSelector = ui.Select({
  items: observationDates,
  placeholder: observationDates[0],
  value:  observationDates[0],
  style:selectorStyle
});

var thresholdInput = ui.Textbox({value: '1', style: textBoxStyle});
var neighborCountInput = ui.Textbox({value: '8', style: textBoxStyle});


sampPan.left.add(ui.Panel({
  widgets: [ui.Label('origin date:', textStyle), compDateSelector],
  layout: ui.Panel.Layout.flow('horizontal'),
  style: panelStyle
}));

sampPan.left.add(ui.Panel({
  widgets: [ui.Label('Threshold: ', textStyle), thresholdInput],
  layout: ui.Panel.Layout.flow('horizontal'),
  style: panelStyle
}));

sampPan.left.add(ui.Panel({
  widgets: [ui.Label('Min Neighbors:', textStyle), neighborCountInput],
  layout: ui.Panel.Layout.flow('horizontal'),
  style: panelStyle
}));

var changeDetectionButton = ui.Button({
  label: 'Detect Changes in Backscatter',
  onClick: function() {
   detectChanges(); 
  },
  style: buttonStyle
});

var removeChangedSamplesButton = ui.Button({
  label: 'Filter Samples',
  onClick: removeChangedSamples,
  style:buttonStyle
});

sampPan.left.add( ui.Panel({widgets: [changeDetectionButton, removeChangedSamplesButton], style: panelStyle, layout: ui.Panel.Layout.flow('horizontal')}));


sampPan.left.add(ui.Label(seperatorContent));
sampPan.left.add( ui.Label({value: 'Split samples into Training and Validation Splits',style: headerStyle}));


var validationPercentageInput = ui.Textbox({value: '33.33', style: textBoxStyle});
sampPan.left.add(ui.Panel({widgets:[ui.Label('Percentage of Samples to use for Validation: ', textStyle), validationPercentageInput], style: panelStyle, layout: ui.Panel.Layout.Flow('horizontal')}));

sampPan.left.add(ui.Label(seperatorContent));
sampPan.left.add( ui.Label({value: 'Store the sample data to the Dictionary',style: headerStyle}));


var updateButton = ui.Button({label: 'Update Sample Dictionary', style: buttonStyle, onClick: function() {createTrainingDataDict();  createOrUpdateTrainingDataTable(sampleDictionary); updateHistograms();  }});

var exportButton = ui.Button({label: 'Export Sample Dictionary to Asset', style: buttonStyle, onClick: function() {  exportToAsset(sampleDictionary, 'users/your_username/asset_folder');  } });

sampPan.left.add( ui.Panel({
    widgets: [updateButton, exportButton],
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {stretch: 'horizontal', backgroundColor: panelBackgroundColor}
  }));
  sampPan.left.add(ui.Label(seperatorContent));
  
var trainingDataTable; 
var trainingDataTablePanel = ui.Panel({style: invisPanelStyle});

sampPan.right.add(ui.Label('Sample Dictionary Dashbord', smallHeaderStyle)); 

sampPan.right.add(trainingDataTablePanel); 

updateDateDropdown(observationDates);
createTrainingDataDict(); 
createOrUpdateTrainingDataTable(sampleDictionary);

createMenuButton('Sampling', sampPan.left, sampPan.middle , sampPan.right);

/***********************************************************************
 *                             Histogram                               *
 ***********************************************************************/

//=================================================
// functions
//=================================================
//Histograms
var dateKeys = Object.keys(sampleDictionary);
var defaultDate = dateKeys.length > 0 ? dateKeys[1] : null;

var dateSelector = ui.Select({
  items: observationDates,
  value: defaultDate,
  style: selectorStyle
});

var bandSelector = ui.Select({
  items: ['VV', 'VH', 'aspect', 'slope', 'ratio', 'HAND'],
  value: 'VH',
  style: selectorStyle
});

var histAoiSelector = ui.Select({
  items: Object.keys(aoiDictionary),
  placeholder: 'Select an AOI',
  value: 'Subset 1',
  style: selectorStyle
});

var plotButton = ui.Button({
  label: 'Plot',
  onClick: updateHistograms,
  style: buttonStyle
});

var selectorsPanel = ui.Panel({
  widgets: [dateSelector, bandSelector, histAoiSelector, plotButton],
  layout: ui.Panel.Layout.flow('horizontal'),
  style: invisPanelStyle
});

sampPan.right.add(selectorsPanel);

var histogramCount = 0;
var combinedHistogram;
var histogramPanel = ui.Panel({style: invisPanelStyle});
sampPan.right.add(histogramPanel);

function updateHistograms() {
  var selectedDate = dateSelector.getValue() || defaultDate;
  var selectedBand = bandSelector.getValue() || 'VH';
  var selectedAOIName = histAoiSelector.getValue() || 'AoI';

  var points = sampleDictionary[selectedDate];
  var histAoi = aoiDictionary[selectedAOIName];
  var date = ee.Date(selectedDate);
  var image = s1WithBands.filter(ee.Filter.eq('date', date)).first().clip(histAoi);

  var bandList = image.bandNames();
  var bandAvailable = bandList.contains(selectedBand);

  bandAvailable.evaluate(function(bandExists) {
    if (!bandExists) {
      print('Selected band is not available in the image.');
      return;
    } else {
      image = image.select(selectedBand);
      histogramCount++;

      var imageHistogram = ui.Chart.image.histogram({
        image: image,
        region: histAoi,
        scale: 10,
        minBucketWidth: 0.5,
        maxPixels: 1E12
      });

      var floodedPoints = points.filter(ee.Filter.eq('class', 1));
      var floodedPointMask = ee.Image().paint({featureCollection: floodedPoints, color: 1}).clip(histAoi);

      var nonFloodedPoints = points.filter(ee.Filter.eq('class', 0));
      var nonFloodedPointMask = ee.Image().paint({featureCollection: nonFloodedPoints, color: 1}).clip(histAoi);

      var floodedMaskedImage = image.updateMask(floodedPointMask);
      var nonFloodedMaskedImage = image.updateMask(nonFloodedPointMask);

       combinedHistogram = ui.Chart.image.histogram({
        image: image.addBands(floodedMaskedImage).addBands(nonFloodedMaskedImage),
        region: histAoi,
        scale: 10,
        minBucketWidth: 0.25,
        maxPixels: 1E12,
      })
      .setSeriesNames(['Image', 'Samples F', 'Samples nonF']).setChartType('ColumnChart')
      .setOptions({
        title: 'Histogram for ' + selectedBand + ' on ' + selectedDate + ' (Area: '+ selectedAOIName + ' Plot: '+ histogramCount+' )',
        hAxes: {0: {title: 'Backscatter Value [dB]'}, 1: {title: 'Backscatter Value [dB]'}},
        vAxes: {0: {title: 'Pixel Frequency'}, 1: {title: 'Sample Frequency'}},
        series: {
          0: {color: 'black', targetAxisIndex: 0, type: 'area'},
          1: {color: 'blue', targetAxisIndex: 1, type: 'steppedArea', areaOpacity: 1},
          2: {color: 'green', targetAxisIndex: 1, type: 'steppedArea', areaOpacity: 1}
        },
        legend: {}
      });

        histogramPanel.clear(); 
        histogramPanel.add(combinedHistogram);
    }
  });
}
//updateHistograms();

/***********************************************************************
 *                             CLASSIFICATION                          *
 ***********************************************************************/
//=================================================
//functions
//=================================================

var preClassCollection;

function createPreClasssificationCollection(sampleDictionary, collection) {

  var dates = ee.List(ee.Dictionary(sampleDictionary).keys()).map(function(dateStr) {
    return ee.Date(dateStr);
  });

  var modifiedCollection = collection.map(function(image) {
    var date = image.get('date'); 
    var dateString = ee.Date(date).format('YYYY-MM-dd');
    return image.set('dateString', dateString);
  });


  var filteredCollection = modifiedCollection.filter(ee.Filter.inList('date', dates));
  preClassCollection = filteredCollection;
}

function classifyImage(image, sampleDictionary, numTrees, scale) {
var dateString = image.get('dateString');
  var sampleData = ee.FeatureCollection(ee.Dictionary(sampleDictionary).get(dateString));
  
  var trainingSplit = sampleData.filter(ee.Filter.eq('isValidation', 0));
  var testingSplit = sampleData.filter(ee.Filter.eq('isValidation', 1));

 
  var floodedTrainingCount = trainingSplit.filter(ee.Filter.eq('class', 1)).size();
  var nonFloodedTrainingCount = trainingSplit.filter(ee.Filter.eq('class', 0)).size();


var bands = image.bandNames();
  var training = image.select(bands).sampleRegions({
    collection: trainingSplit,
    properties: ['class'],
    tileScale: 12,
    scale: scale
  });
  
  var bandString = ee.String(bands.iterate(function(band, prev) {
    return ee.Algorithms.If(ee.String(prev).length(), 
                            ee.String(prev).cat(', ').cat(ee.String(band)), 
                            ee.String(band));
  }, ee.String('')));


 var classifier = ee.Classifier.smileRandomForest(numTrees).train({
    features: training,
    classProperty: 'class',
    inputProperties: bands
  });

  var classified = image.select(bands).classify(classifier).set('date', image.get('date'));

  // Check if probability output is enabled
  if (probabilityCheckbox.getValue()) {
    var probabilityClassifier = classifier.setOutputMode('PROBABILITY');
    var probabilityClassified = image.select(bands).classify(probabilityClassifier);

    // Assuming class '1' is the class of interest, adjust if needed
    var probabilityBand = probabilityClassified.select('classification').rename('probability');

    // Add the probability band to the classified image
    classified = classified.addBands(probabilityBand);
  }
  
    var trainErrorMatrix = classifier.confusionMatrix();
    var trainAccuracy = trainErrorMatrix.accuracy();
    var info = classifier.explain();
    
    
    var testingSamples = image.select(bands).sampleRegions({
        collection: testingSplit,
        properties: ['class'],
        scale: scale
    });
    var tested = testingSamples.classify(classifier);
    var testingErrorMatrix = tested.errorMatrix('class', 'classification');
    
   
    var testingProperty = {
    'errorMatrix': testingErrorMatrix.array(),
    'nEq': {
      'f': testingSplit.filter(ee.Filter.eq('class', 1)).size(),
      'nf': testingSplit.filter(ee.Filter.eq('class', 0)).size()
    },
    'outOfBagErrorEstimate': info.get('outOfBagErrorEstimate')
  };


  
  classified = classified.set({
    'floodedCount': floodedTrainingCount,
    'nonFloodedCount': nonFloodedTrainingCount,
    'dateString': dateString,
     'usedBands': bandString,
     'trainErrorMatrix': trainErrorMatrix.array(),
     'trainAccuracy':trainAccuracy,
    // 'validationErrorMatrix': testingErrorMatrix.array(),
    //  'validationAccuracy': testingErrorMatrix.accuracy(),
     'info': info,
     'testing': testingProperty
  });
  
 

  return classified;
}

function classifyCollection(sampleDictionary, numTrees, scale) {
  createPreClasssificationCollection(sampleDictionary, s1WithBands);
  classifiedCollection = preClassCollection.map(function(image) {
    return classifyImage(image, sampleDictionary, numTrees, scale);
  });

 
  print("Classified Collection:", classifiedCollection);
  
  
  displayMessage('Classifying the collection, please wait...', 'white'); 

  /*
  classifiedCollection.evaluate(function(success) {
    
    displayMessage('Classification complete!', 'green');
  }, function(error) {
    
    displayMessage('Classification failed: ' + error, 'Coral');
  });
  */
}

function displayPropsTable(classifiedCollection) {
    var propsList = classifiedCollection.map(function(image) {
        var outOfBagErrorEstimate = ee.Dictionary(image.get('info')).get('outOfBagErrorEstimate');
        var numberOfTrees = ee.Dictionary(image.get('info')).get('numberOfTrees');
        var floodedCount = image.get('floodedCount'); 
        var nonFloodedCount = image.get('nonFloodedCount'); 
        var date = ee.Date(image.get('date')).format('YYYY-MM-dd');
        return ee.Feature(null, {
            'Date': date, 
            'Bag Err': outOfBagErrorEstimate, 
            'Trees': numberOfTrees, 
            'F': floodedCount, 
            'NF': nonFloodedCount
        });
    });
    var propsCollection = ee.FeatureCollection(propsList);
    var chart = ui.Chart.feature.byFeature(propsCollection, 'Date')
        .setChartType('Table')
        .setOptions(tableOptions);
    clasPan.right.add(chart);
}

function displayImportanceTable(classifiedCollection) {
    var importanceList = classifiedCollection.map(function(image) {
        var importance = ee.Dictionary(image.get('info')).get('importance');
        var date = ee.Date(image.get('date')).format('YYYY-MM-dd');
        return ee.Feature(null, importance).set('Date', date);
    });
    var importanceCollection = ee.FeatureCollection(importanceList);
    var chart = ui.Chart.feature.byFeature(importanceCollection, 'Date')
        .setChartType('Table')
        .setOptions(tableOptions);
    var titleLabel = ui.Label({
        value: 'Importance Properties Table',
        style: tableHeaderStyle
    });
    clasPan.right.add(titleLabel);
    clasPan.right.add(chart);
}

function displayTrainErrorMatrixTables(classifiedCollection) {
    classifiedCollection.evaluate(function(collection) {
        collection.features.forEach(function(feature) {
            var date = feature.properties.dateString;
            var trainErrorMatrix = feature.properties.validationErrorMatrix;
            var dataTable = [['', 'Positive', 'Negative'],
                             ['Positive'].concat(trainErrorMatrix[0]),
                             ['Negative'].concat(trainErrorMatrix[1])];
            clasPan.right.add(ui.Label('Validation Error Matrix for ' + date, tableHeaderStyle));
            var chart = ui.Chart(dataTable).setChartType('Table').setOptions(tableOptions);
            clasPan.right.add(chart);
        });
    }, function(error) {
        console.error('Error:', error);
    });
}

function addResultsToMap(sampleDictionary, collection, resultMap, header, layername, legendPanel) {
    if (collection === undefined) {
        displayMessage('Error: Run Classification first!', 'coral');
        return;
    }
    var dates = ee.List(Object.keys(sampleDictionary));
    legendPanel.add(ui.Label(header, headerStyle));

    dates.getInfo().forEach(function(dateString) {
        var filteredCollection = collection.filter(ee.Filter.eq('dateString', dateString));
        var image = ee.Image(filteredCollection.first());
        var layerName = layername + dateString;

        // Add the classified layer
        var classifiedLayer = ui.Map.Layer(image.select('classification'), visParams.classified, layerName, false);
        resultMap.add(classifiedLayer);
        createLayerVisibilityCheckbox(legendPanel, 'binary ('+dateString+')', classifiedLayer, '0', '1', {'blue': 'flooded'}, '[-]');

        // Check if the probability band exists and add it as a separate layer
        if (image.bandNames().contains('probability')) {
            var probabilityLayerName = layerName + '_probability';
            var probabilityLayer = ui.Map.Layer(image.select('probability'), {min: 0, max: 1, palette: perulaReversed}, probabilityLayerName, false);
            resultMap.add(probabilityLayer);
            createLayerVisibilityCheckbox(legendPanel, 'confidence ('+dateString+')', probabilityLayer,  '0', '100', perulaReversed, '[%]', true);
        }
    });

    displayMessage('Layers added to the Map', 'green');
}


//=================================================
//UI
//=================================================
 
clasPan.right.add(ui.Label(seperatorContent));
clasPan.right.add(ui.Label('Random Forrest Classifier Dashbord', smallHeaderStyle)); 

var bandPanel = ui.Panel({
  widgets: [
    ui.Label('Choose your Input Features', headerStyle),
    //ui.Label(seperatorContent)
  ],
  layout: ui.Panel.Layout.flow('vertical'),
  style: panelStyle
});

function createBandCheckbox(label, bandKey) {
var checkbox = ui.Checkbox({
label: label,
value: bandState[bandKey],
style:textStyle,
onChange: function(checked) {
bandState[bandKey] = checked;
s1WithBands = updateCollectionBasedOnBandSelection(s1Collection);
}
});
bandPanel.add(checkbox) ;
}

var checkboxVV = createBandCheckbox('VV (Sentinel-1)', 'VVBand');
var checkboxVH = createBandCheckbox('VH (Sentinel-1)', 'VHBand');
var checkboxRatio = createBandCheckbox('VV/VH (Sentinel-1)', 'ratioBand');
var checkboxAspect = createBandCheckbox('Aspect (Hydrologically Enforced Digital Elevation Model)', 'aspectBand');
var checkboxSlope = createBandCheckbox('Slope (Hydrologically Enforced Digital Elevation Model)', 'slopeBand');
var checkboxHAND = createBandCheckbox('Height Above Nearest Drainage (Merit Hydro) ', 'HANDBand');
var checkboxLandCover = createBandCheckbox('Land Cover', 'landCoverBand');

bandPanel.add(ui.Label(seperatorContent));

var randomForrestSettingsPanel = ui.Panel({
style: panelStyle
});

randomForrestSettingsPanel.add(ui.Label('Configure the Random Forrest Algorithm', headerStyle));


var treesInput = ui.Textbox({value: '1000', style: textBoxStyle});

randomForrestSettingsPanel.add(ui.Panel({widgets:[ui.Label('Number of Trees: ',  textStyle), treesInput], style: {backgroundColor: panelBackgroundColor},layout: ui.Panel.Layout.Flow('horizontal')}));
var scaleInput = ui.Textbox({value: '10', style: textBoxStyle});
randomForrestSettingsPanel.add(ui.Panel({widgets:[ui.Label('Scale:           ', textStyle), scaleInput], style: {backgroundColor: panelBackgroundColor}, layout: ui.Panel.Layout.Flow('horizontal')}));

var probabilityCheckbox = ui.Checkbox({
  label: 'Compute Probability Map',
  value: true,
  style: textStyle
});
randomForrestSettingsPanel.add(probabilityCheckbox);
var classifyButton = ui.Button({
label: 'Run Random Forrest Classifier', 
style: buttonStyle
});

var addClassifiedToMapButton = ui.Button({
label: 'Add to Map',
style: buttonStyle
});


clasPan.left.add(ui.Label('Random Forrest Classifier', bigHeaderStyle));
clasPan.left.add(ui.Label(seperatorContent));
clasPan.left.add(bandPanel);
clasPan.left.add(randomForrestSettingsPanel);
clasPan.left.add(ui.Label(seperatorContent));
clasPan.left.add(ui.Label('Compute Raw Delineation Product', headerStyle));
var buttonsPanel = ui.Panel({
  widgets: [classifyButton, addClassifiedToMapButton],
  style: panelStyle, 
  layout: ui.Panel.Layout.Flow('horizontal')
});
clasPan.left.add(buttonsPanel);
clasPan.left.add(ui.Label(seperatorContent));


function classifyOnClick(){
var numTrees = parseInt(treesInput.getValue(), 10);
var scale = parseFloat(scaleInput.getValue());

classifyCollection(sampleDictionary, numTrees, scale);
displayPropsTable(classifiedCollection);
displayImportanceTable(classifiedCollection);
//displayTrainErrorMatrixTables(classifiedCollection);


//classifiedCollection = classifiedCollection.map(mapAndCalculateMetrics);

//displayMetricsBarChart(classifiedCollection);

}



classifyButton.onClick(function() {
classifyOnClick();
});

addClassifiedToMapButton.onClick(function() {
addResultsToMap(sampleDictionary, classifiedCollection, clasPan.map2, 'Raw Classification Results (upper map)', 'Classified: ',clasPan.legend);
}); 

createMenuButton('Random Forrest Classifier', clasPan.left, clasPan.middle, clasPan.right);
/***********************************************************************
 *                             Testing                              *
 ***********************************************************************/
 
 // Define the function to calculate metrics from an error matrix
function calculateMetrics(errorMatrix) {
 var arr = errorMatrix.array();
  var TP = arr.get([1, 1]);
  var FP = arr.get([0, 1]);
  var FN = arr.get([1, 0]);
  var TN = arr.get([0, 0]);
  
  var accuracy = errorMatrix.accuracy();
  var precision = TP.divide(TP.add(FP));
  var recall = TP.divide(TP.add(FN));
  var fscore = errorMatrix.fscore(1);
  var consumersAccuracy = errorMatrix.consumersAccuracy(); 
  var producersAccuracy = errorMatrix.producersAccuracy(); 


  return {
    accuracy: accuracy,
    precision: precision,
    recall: recall,
    fscore: fscore,
    consumersAccuracy: consumersAccuracy,
    producersAccuracy: producersAccuracy,
  };
}

// Define the function to map over the collection and calculate metrics
function mapAndCalculateMetrics(image) {
  var trainErrorMatrix = ee.ConfusionMatrix(image.get('trainErrorMatrix'));
  var validationErrorMatrix = ee.ConfusionMatrix(image.get('validationErrorMatrix'));
  
  // Calculate metrics for training and validation error matrices
  var trainMetrics = calculateMetrics(trainErrorMatrix); // Beta is set to 1 for standard F1 score
  var validationMetrics = calculateMetrics(validationErrorMatrix); // Beta is set to 1 for standard F1 score
  
  // Set the metrics as properties of the image
  return image.set({
    trainAccuracy: trainMetrics.accuracy,
    trainPrecision: trainMetrics.precision,
    trainRecall: trainMetrics.recall,
    trainFscore: trainMetrics.fscore,
    trainConsumersAccuracy: trainMetrics.consumersAccuracy,
    trainProducersAccuracy: trainMetrics.producersAccuracy,
    validationAccuracy: validationMetrics.accuracy,
    validationPrecision: validationMetrics.precision,
    validationRecall: validationMetrics.recall,
    validationFscore: validationMetrics.fscore,
    validationConsumersAccuracy: validationMetrics.consumersAccuracy,
    validationProducersAccuracy: validationMetrics.producersAccuracy,
   
  });
}

function displayMetricsBarChart(imageCollection) {
  var metricsList = imageCollection.map(function(image) {
    var date = ee.Date(image.get('dateString')).format('YYYY-MM-dd');

    // Return as a feature with grouped metrics as properties
    return ee.Feature(null, {
      'Date': date,
      'Train Accuracy': image.get('trainAccuracy'),
      'Validation Accuracy': image.get('validationAccuracy'),
      'Train Precision': image.get('trainPrecision'),
      'Validation Precision': image.get('validationPrecision'),
      'Train Recall': image.get('trainRecall'),
      'Validation Recall': image.get('validationRecall')
    });
  });

  var metricsCollection = ee.FeatureCollection(metricsList);

  var chartOptions = {
    title: 'Performance Metrics Grouped by Type',
    hAxis: {title: 'Date'},
    vAxis: {title: 'Value', minValue: 0, maxValue: 1},
    legend: { position: 'top', maxLines: 3 },
    bar: {groupWidth: '75%'},
    isStacked: false
  };

  // Create the bar chart with grouped metrics
  var chart = ui.Chart.feature.byFeature(metricsCollection, 'Date')
    .setChartType('BarChart')
    .setOptions(chartOptions)
    .setSeriesNames([
      'Train Accuracy', 'Validation Accuracy',
      'Train Precision', 'Validation Precision',
      'Train Recall', 'Validation Recall'
    ]);

  clasPan.right.add(chart);
}


// Assuming collectionWithMetrics is your ImageCollection with the metrics set as properties


/***********************************************************************
 *                             POST-PROCESSING                         *
 ***********************************************************************/
//=================================================
//functions
//=================================================

var postProcessingState = {
  applyConnectivityFilter: true,
  selectedConnectivityRule: '4px-Neighbourhood',
  selectedNeighborCount:  4,
  applySlopeFilter: true,
  maskWaterBodies: true,
  selectedYear: 2021,
  neighborCount: 8,
  slopePercentage: 5
};

function maskWaterBodies(image) {
  var waterDataset = ee.ImageCollection("JRC/GSW1_4/YearlyHistory");
  var waterImage = waterDataset.filter(ee.Filter.calendarRange(postProcessingState.selectedYear, postProcessingState.selectedYear, 'year')).mean();
  waterImage = waterImage.select('waterClass');
  var waterMask = waterImage.eq(2).or(waterImage.eq(3));
  return image.where(waterMask, 0);
}

function maskWaterBodiesProbBand(image) {
  var waterDataset = ee.ImageCollection("JRC/GSW1_4/YearlyHistory");
  var waterImage = waterDataset.filter(ee.Filter.calendarRange(postProcessingState.selectedYear, postProcessingState.selectedYear, 'year')).mean();
  waterImage = waterImage.select('waterClass');
  var waterMask = waterImage.eq(2).or(waterImage.eq(3));
  return image.where(waterMask, 1);
}

function applySlopeFilter(image, slopePercentage, aoi) {
    var slope = ee.Terrain.slope(DEM);
    var slopeMask = slope.lte(slopePercentage);

    var pixelArea = ee.Image.pixelArea();
    var totalArea = pixelArea.mask(image.mask()).reduceRegion({
        reducer: ee.Reducer.sum(),
        geometry: aoi,
        scale: 500,
        maxPixels: 1e9,
        bestEffort: true
    });

    var filteredImage = image.where(slopeMask.not(), 0);

    var filteredArea = pixelArea.mask(filteredImage.mask()).reduceRegion({
        reducer: ee.Reducer.sum(),
        geometry: aoi,
        scale: 500,
        maxPixels: 1e9,
        bestEffort: true
    });

    var percentageRemoved = ee.Number(filteredArea.get('area'))
        .divide(ee.Number(totalArea.get('area')))
        .multiply(100)
        .subtract(100)
        .abs();
 
    return filteredImage.set('slope', percentageRemoved);
}


function applyConnectivityFilter(image, aoi) {
    var eightConnected = postProcessingState.selectedConnectivityRule === '8px-Neighbourhood';
    var connectedPixels = image.connectedPixelCount(100, eightConnected);

    var connectivityMask = connectedPixels.gte(postProcessingState.selectedNeighborCount);

    var filteredImage = image.where(connectivityMask.not(), 0);

    var pixelArea = ee.Image.pixelArea();
    var totalArea = pixelArea.mask(image.mask()).reduceRegion({
        reducer: ee.Reducer.sum(),
        geometry: aoi,
        scale: 500,
        maxPixels: 1e9,
        bestEffort: true
    });

    var filteredArea = pixelArea.mask(filteredImage.mask()).reduceRegion({
        reducer: ee.Reducer.sum(),
        geometry: aoi,
        scale: 500,
        maxPixels: 1e9,
        bestEffort: true
    });

    var percentageRemoved = ee.Number(filteredArea.get('area'))
        .divide(ee.Number(totalArea.get('area')))
        .multiply(100)
        .subtract(100)
        .abs();
        
       

    return filteredImage.set('connectivity', percentageRemoved).set('test','test');
}


function calculateFloodedArea(image, aoi) {
  var pixelArea = ee.Image.pixelArea();
  var floodedArea = pixelArea.updateMask(image.mask()).reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: aoi,
    scale: 500,
    maxPixels: 1e9,
    bestEffort: true
  });
  return floodedArea.get('area');
}

function applyPostProcessing(imageCollection, postProcessingState) {
  displayMessage('Applying Post-Processing, please wait ...', 'white');

  postProcessedCollection = imageCollection.map(function(image) {
  
    var classificationBand = image.select('classification');
    var probabilityBand = image.select('probability');

    // Mask water bodies on both classification and probability bands
    if (postProcessingState.maskWaterBodies) {
      classificationBand = maskWaterBodies(classificationBand);
    //  probabilityBand = maskWaterBodiesProbBand(probabilityBand);
    }

    // Apply slope filter on both classification and probability bands
    if (postProcessingState.applySlopeFilter) {
      classificationBand = applySlopeFilter(classificationBand, postProcessingState.slopePercentage, aoiFC);
     // probabilityBand = applySlopeFilter(probabilityBand, postProcessingState.slopePercentage, aoiFC);
    }

    // Apply connectivity filter and non-zero mask only on the classification band
    if (postProcessingState.applyConnectivityFilter) {
      classificationBand = applyConnectivityFilter(classificationBand, aoiFC);
    }

    // Combine the processed bands back into the image
    image = image.addBands(classificationBand, ['classification'], true);
    image = image.addBands(probabilityBand, ['probability'], true);

    var floodedArea = calculateFloodedArea(classificationBand, aoiFC);
    
    

    return image.set('floodedArea', floodedArea);
    
  });

  print('postProcessedCollection', postProcessedCollection);

  postProcessedCollection.evaluate(function(success) {
    displayMessage('Post-Processing complete!', 'green');
  }, function(error) {
    displayMessage('Post-Processing failed: ' + error, 'Coral');
  });
}

var postProcessingChart = null;

function postProcessingTable(collection) {
  var rows = [];

  collection.evaluate(function(col) {
    col.features.forEach(function(feature) {
      var props = feature.properties;
      var dateString = props.dateString;
      var slope = props.slope ? props.slope : 'NaN';
      var connectivity = props.connectivity ? props.connectivity : 'NaN';
      var floodedArea = props.floodedArea ? props.floodedArea : 'NaN';

      rows.push([dateString, slope, connectivity, floodedArea]);
    });

    // Create the data table
    var dataTable = [['Date', 'Slope', 'Connectivity', 'Flooded Area']].concat(rows);

    if (!postProcessingChart) {
      // If the chart doesn't exist, create it and add it to the panel
      postProcessingChart = ui.Chart(dataTable)
        .setChartType('Table')
        .setOptions(tableOptions);
      postPan.right.add(ui.Label(seperatorContent));
      postPan.right.add(ui.Label('Post-Processing Dashbord', smallHeaderStyle)); 

      postPan.right.add(ui.Label({
        value: 'Removed Pixels [%] and Flooded Area [ha] after Post-Processing',
        style: tableHeaderStyle
      }));
      postPan.right.add(postProcessingChart);
    } else {
      // If the chart exists, update its data
      postProcessingChart.setDataTable(dataTable);
    }
  });
}


//=================================================
//UI
//=================================================


postPan.left.add(ui.Label('Post-Processing', bigHeaderStyle));
postPan.left.add(ui.Label(seperatorContent));

postPan.left.add(ui.Label('Filter Pixels based on minimum Neighbour Pixels', headerStyle));

var connectivityCheckbox = ui.Checkbox({
  label: 'Min connected Pixels in a',
  style: textStyle,
  value: postProcessingState.applyConnectivityFilter,
  onChange: function(checked) {
    postProcessingState.applyConnectivityFilter = checked;
  }
});

var connectivityRuleSelector = ui.Select({
  items: ['4px-Neighbourhood', '8px-Neighbourhood'],
  value: '4px-Neighbourhood',
  onChange: function(rule) {
    postProcessingState.selectedConnectivityRule = rule;
  }
});

var neighborCountSlider = ui.Slider({
  min: 1,
  max: 20,
  value: 4,
  step: 1,
  style: sliderStyle,
  onChange: function(value) {
    postProcessingState.selectedNeighborCount = value;
  }
});

postPan.left.add(ui.Panel({
  widgets: [connectivityCheckbox, connectivityRuleSelector, neighborCountSlider],
  layout: ui.Panel.Layout.flow('horizontal'),
  style: panelStyle
}));

postPan.left.add(ui.Label(seperatorContent));
postPan.left.add(ui.Label('Mask Steep Areas', headerStyle));

var slopeCheckbox = ui.Checkbox({
  label: 'Maximum Slope',
  style: textStyle,
  value: postProcessingState.applySlopeFilter,
  onChange: function(checked) {
    postProcessingState.applySlopeFilter = checked;
  }
});

var slopeSlider = ui.Slider({
  min: 0,
  max: 10,
  value: postProcessingState.slopePercentage,
  step: 1,
  style: sliderStyle,
  onChange: function(value) {
    postProcessingState.slopePercentage = value;
  }
});

var slopeLabel = ui.Label('Degrees', textStyle);
postPan.left.add(ui.Panel({
  widgets: [slopeCheckbox, slopeSlider, slopeLabel],
  layout: ui.Panel.Layout.flow('horizontal'),
  style: panelStyle
}));

postPan.left.add(ui.Label(seperatorContent));
postPan.left.add(ui.Label('Remove permanent Water Bodies', headerStyle));

var waterBodyCheckbox = ui.Checkbox({
  label: 'JRC Yearly Mean Water Mask',
  value: postProcessingState.maskWaterBodies,
  style: textStyle,
  onChange: function(checked) {
    postProcessingState.maskWaterBodies = checked;
  }
});

var yearSelector = ui.Select({
  items: ["2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021"],
  value: '2021',
  style: selectorStyle,
  onChange: function(year) {
    postProcessingState.selectedYear = parseInt(year, 10);
  }
});


postPan.left.add(ui.Panel({
  widgets: [waterBodyCheckbox, yearSelector],
  layout: ui.Panel.Layout.flow('horizontal'),
  style: panelStyle
}));
postPan.left.add(ui.Label(seperatorContent));

var applyPostProcessingButton = ui.Button({
label: 'Apply', 
style: buttonStyle, 
});

applyPostProcessingButton.onClick(function() {
 if (!classifiedCollection) {
    displayMessage('Run the Classification first!', 'Coral');
    return; 
  }
  applyPostProcessing(classifiedCollection, postProcessingState);
  postProcessingTable(postProcessedCollection);
});

var addPostProcessedCollectionToMapButton = ui.Button({
label: 'Add to Map',
style: buttonStyle
});

addPostProcessedCollectionToMapButton.onClick(function() {
addResultsToMap(sampleDictionary, postProcessedCollection, resultMap, 'Post-Processed Classification Results (lower map)', 'Post-Processed: ', postPan.legend);
}); 

postPan.left.add( ui.Panel({
widgets: [
  ui.Label('Compute Post-Processed Delineation Product', headerStyle),
  ui.Panel({widgets:[applyPostProcessingButton, addPostProcessedCollectionToMapButton],style: panelStyle, layout: ui.Panel.Layout.Flow('horizontal')}),
  ui.Label(seperatorContent)
  ] ,
style: panelStyle
}));
//applyPostProcessing(classifiedCollection, postProcessingState);
 // postProcessingTable(postProcessedCollection);
  
createMenuButton('Post-Processing', postPan.left, postPan.middle, postPan.right );

/***********************************************************************
 *                             Validation                              *
 ***********************************************************************/

function getValidationCollection(actualCollection, classifiedCollection) {
    var dateList = classifiedCollection.aggregate_array('dateString');

    var validationCollection = ee.ImageCollection(dateList.map(function(date) {
        var actualImage = actualCollection.filter(ee.Filter.eq('dateString', date)).first();
        var classifiedImage = classifiedCollection.filter(ee.Filter.eq('dateString', date)).first();

        var actual = actualImage.select([0], ['actualClass']);
        var predicted = classifiedImage.select([0], ['predictedClass']);
        
        var aoi = ee.Geometry(actual.get('system:footprint')).bounds();
        
        predicted = predicted.clip(aoi);
        actual = actual.clip(aoi);

        // Correct classifications: both actual and predicted are the same
        var correctNonFlooded = actual.eq(0).and(predicted.eq(0)); // Both non-flooded
        var correctFlooded = actual.eq(1).and(predicted.eq(1)); // Both flooded

        // Errors
        var type1Error = actual.eq(0).and(predicted.eq(1)).multiply(2); // False Positive
        var type2Error = actual.eq(1).and(predicted.eq(0)).multiply(3); // False Negative

        // Combine correct classifications and errors
        var error = correctNonFlooded.multiply(0) // Non-flooded correctly identified
            .add(correctFlooded.multiply(1)) // Flooded correctly identified
            .add(type1Error) // Type 1 Error
            .add(type2Error) // Type 2 Error
            .rename('error');
            
            
           // Calculate pixel area for each classification type
        var scale = pxByPxScaleSlider.getValue();
        var pixelArea = ee.Image.pixelArea();

        var TP_Area = pixelArea.updateMask(correctFlooded).reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: aoi,
            scale: scale,
            tileScale: 4
        }).get('area');
        
        var TN_Area = pixelArea.updateMask(correctNonFlooded).reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: aoi,
            scale: scale,
            tileScale: 4
        }).get('area');

        var FP_Area = pixelArea.updateMask(type1Error).reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: aoi,
            scale: scale,
            tileScale: 4
        }).get('area');

        var FN_Area = pixelArea.updateMask(type2Error).reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: aoi,
            scale: scale,
            tileScale: 4
        }).get('area');
        
        // Calculate pixel area for flooded in actualClass
        var actualFloodedArea = pixelArea.updateMask(actual.eq(1)).reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: aoi,
            scale: scale,
            tileScale: 4
        }).get('area');

        // Create the pxByPx.errorMatrix object
        var pxByPxErrorMatrix = [[ee.Number(TP_Area).round() , ee.Number(FP_Area).round() ], [ee.Number(FN_Area).round() , ee.Number(TN_Area).round() ]];


        // Add the pxByPx.errorMatrix object as a property
        return ee.Image.cat([actual, predicted, error]).set({
            'dateString': date,
            
            'testing': classifiedImage.get('testing'),
            'pxByPx': {
                'errorMatrix': pxByPxErrorMatrix,
                'actualFlooded': actualFloodedArea
            }
        });
    }));


    return validationCollection;
}

function calcSampleNum(validationCollection) {
    return validationCollection.map(function(image) {
        // Get the AoI from the image property
        var aoi = ee.Geometry(image.get('system:footprint')).bounds();
        image.clip(aoi);
        // Get the actualClass band
        
        var actualClass = image.select('actualClass');

        // Calculate the number of pixels for each class using frequencyHistogram
        var pixelCount = actualClass.reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: aoi,
            scale: 500, // Set an appropriate scale for your data
            maxPixels: 1E13
        });

        // Get the histogram object and retrieve the count for each class
        var histogram = ee.Dictionary(pixelCount.get('actualClass'));
        var floodedCount = ee.Number(histogram.get('1', 0));
        var nonFloodedCount = ee.Number(histogram.get('0', 0));
        var totalCount = ee.Number(floodedCount.add(nonFloodedCount));

        // Calculate weights
        var W = {
            f: floodedCount.divide(totalCount),
            nf: nonFloodedCount.divide(totalCount)
        };

        // Artificially set n for testing purposes
        var nTot = ee.Number(500);
        
         
          if (overrideCheckbox.getValue()) {
            var newNTotValue = nTotInput.getValue();
            nTot = ee.Number.parse(newNTotValue) || nTot;  // Override nTot if parsing is successful
        }

        // Allocate the samples equally (nEq) and proportionally (nProp)
        var nEq = {
            f: nTot.divide(2),
            nf: nTot.divide(2)
        };
        var nProp = {
            f: nTot.multiply(W.f).toInt(), // Ensure we have an integer value
            nf: nTot.multiply(W.nf).toInt() // Ensure we have an integer value
        };

        // Add the calculated pixel counts, weights, and sample allocations as properties
        return image.set({
            'PixelCount': {f: floodedCount, nf: nonFloodedCount},
            'Weight': W,
            'nTot': nTot,
            'nEq': nEq,
            'nProp': nProp
        });
    });
}

function plotSampleNumbers(validationCollection) {
  var rows = [];

  validationCollection.evaluate(function(col) {
    col.features.forEach(function(feature) {
      var props = feature.properties;
      var date = feature.properties.dateString;
      
      // Retrieve the n properties
      var nEqF = props.nEq ? props.nEq.f : 'NaN';
      var nEqNF = props.nEq ? props.nEq.nf : 'NaN';
      var nPropF = props.nProp ? props.nProp.f : 'NaN';
      var nPropNF = props.nProp ? props.nProp.nf : 'NaN';

      rows.push([date, nEqF, nEqNF, nPropF, nPropNF]);
    });

    // Create the data table
    var dataTable = [['Date', 'nEq Flooded', 'nEq Non-Flooded', 'nProp Flooded', 'nProp Non-Flooded']].concat(rows);

    // Initialize the chart or update it if it already exists
    if (!sampleNumbersChart) {
      sampleNumbersChart = ui.Chart(dataTable)
        .setChartType('Table')
        .setOptions({title: 'Sample Numbers for Each Image'});
      // Add the chart to a UI panel here if needed
      valPan.right.add(sampleNumbersChart);
    } else {
      sampleNumbersChart.setDataTable(dataTable);
    }
  });
  
}

function applyProportionalStratifiedSamplingToDate(date) {
    var filteredCollection = validationCollection.filter(ee.Filter.eq('dateString', date));
    var image = filteredCollection.first();
    var nProp = ee.Dictionary(image.get('nProp'));
    var nTot = ee.Number(image.get('nTot')).toInt();
    var region = ee.Geometry(image.get('system:footprint')).bounds();
    var dateString = image.get('dateString');
    var aoiName = image.get('aoi');
    var numPointsFlooded = ee.Number(nProp.get('f')).toInt();
    var numPointsNonFlooded = ee.Number(nProp.get('nf')).toInt();
    var samples = image.stratifiedSample({
        numPoints: nTot,
        classBand: 'actualClass',
        region: region,
        scale: 20,
        classValues: [0, 1],
        classPoints: [numPointsNonFlooded, numPointsFlooded],
        geometries: true,
        tileScale: 4
    });
    return samples;
}

function applyEqualStratifiedSamplingToDate(date) {
    var filteredCollection = validationCollection.filter(ee.Filter.eq('dateString', date));
    var image = filteredCollection.first();
    var nEq = ee.Dictionary(image.get('nEq')); // Use nEq instead of nProp
    var nTot = ee.Number(image.get('nTot')).toInt();
    var region = ee.Geometry(image.get('system:footprint')).bounds();
    var dateString = image.get('dateString');
    var aoiName = image.get('aoi');
    var numPointsFlooded = ee.Number(nEq.get('f')).toInt(); // Use nEq for flooded
    var numPointsNonFlooded = ee.Number(nEq.get('nf')).toInt(); // Use nEq for non-flooded
    var samples = image.stratifiedSample({
        numPoints: nTot,
        classBand: 'actualClass',
        region: region,
        scale: 10,
        classValues: [0, 1],
        classPoints: [numPointsNonFlooded, numPointsFlooded], // Equal number of points for each class
        geometries: true,
        tileScale: 4
    });
    return samples;
}

function addSamplesAsGeometryLayer(samples, mapPanel, date) {
  // Get the drawing tools from the map
  var drawingToolsValidationSamples = mapPanel.drawingTools();

  // Convert the FeatureCollection to an array of geometries
  var geometriesList = samples.map(function(feature) {
    return feature.geometry();
  });

  // Evaluate the geometries list and add it as a layer
  geometriesList.evaluate(function(geometriesArray) {
    // Remove the old geometry layer if it exists
    var layers = drawingToolsValidationSamples.layers();
    layers.forEach(function(layer) {
      if (layer.name() === currentGeometryLayerName) {
        drawingToolsValidationSamples.removeLayer(layer);
      }
    });

    // Define a unique name for the new geometry layer
    currentGeometryLayerName = 'Sample Points - ' + date;

    // Add the new geometry layer with the samples
    var newLayer = drawingToolsValidationSamples.addLayer(geometriesArray, currentGeometryLayerName, 'red', true, false);

    // Optionally, if you want to automatically select this new layer in the drawing tools
    //drawingToolsValidationSamples.setLayer(newLayer);
  });
}

function computeOverallAccuracy(samples) {
    var errorMatrix = samples.errorMatrix('actualClass', 'predictedClass');
    return errorMatrix.accuracy();
}

function computeBootstrapAccuracy(samples, numBootstraps, samplePercentage, date) {
    var accuracies = [];

    var resampleSize = samples.size().multiply(samplePercentage).toInt();

    for (var i = 0; i < numBootstraps; i++) {
        var seed = i;
        var resampled = samples.randomColumn('random', seed).sort('random').limit(resampleSize);
        var errorMatrix = resampled.errorMatrix('actualClass', 'predictedClass');
        var accuracy = errorMatrix.accuracy();
        accuracies.push([accuracy]);  // Wrap each accuracy in an array to create a 2D array structure
    }

    var accuraciesArray = ee.Array(accuracies);

    // Combine reducers to calculate the metrics
    var reducers = ee.Reducer.median()
        .combine({
            reducer2: ee.Reducer.minMax(),
            sharedInputs: true
        })
        .combine({
            reducer2: ee.Reducer.percentile([25, 50, 75], ['p25', 'p50', 'p75']),
            sharedInputs: true
        }).combine({
            reducer2: ee.Reducer.sampleVariance(), // Include sample variance
            sharedInputs: true
        });


    // Reducing along the first axis (0) and using the second axis (1) for fieldAxis
    var stats = accuraciesArray.reduce(reducers, [0], 1);

    var properties = {
        'date': date,
        'median': ee.Number(stats.get([0, 0])),
        'min': ee.Number(stats.get([0, 1])),
        'max': ee.Number(stats.get([0, 2])),
        'p25': ee.Number(stats.get([0, 3])),
        'p50': ee.Number(stats.get([0, 4])),
        'p75': ee.Number(stats.get([0, 5]))
    };
    
    var medianAndVariance = {
        'median': ee.Number(stats.get([0, 0])),
        'sampleVariance': ee.Number(stats.get([0, 6]))
    };

    // Create a feature with these properties and add it to the global collection
    var feature = ee.Feature(null, properties);
    bootstrapAccuracy = bootstrapAccuracy.merge(ee.FeatureCollection([feature]));
    
    return medianAndVariance; 
}

function computeBootstrapF1(samples, numBootstraps, samplePercentage, date) {
    var fscores = [];

    var resampleSize = samples.size().multiply(samplePercentage).toInt();

    for (var i = 0; i < numBootstraps; i++) {
        var seed = i;
        var resampled = samples.randomColumn('random', seed).sort('random').limit(resampleSize);
        var errorMatrix = resampled.errorMatrix('actualClass', 'predictedClass');
        var f1 = errorMatrix.fscore(1);
        var f1FloodClass = f1.get([1]);
        fscores.push([f1FloodClass]);  
    }

    var fscoresArray = ee.Array(fscores);

    // Combine reducers to calculate the metrics
    var reducers = ee.Reducer.median()
        .combine({
            reducer2: ee.Reducer.minMax(),
            sharedInputs: true
        })
        .combine({
            reducer2: ee.Reducer.percentile([25, 50, 75], ['p25', 'p50', 'p75']),
            sharedInputs: true
        }).combine({
            reducer2: ee.Reducer.sampleVariance(), // Include sample variance
            sharedInputs: true
        });

    // Reducing along the first axis (0) and using the second axis (1) for fieldAxis
    var stats = fscoresArray.reduce(reducers, [0], 1);

    var properties = {
        'date': date,
        'median': ee.Number(stats.get([0, 0])),
        'min': ee.Number(stats.get([0, 1])),
        'max': ee.Number(stats.get([0, 2])),
        'p25': ee.Number(stats.get([0, 3])),
        'p50': ee.Number(stats.get([0, 4])),
        'p75': ee.Number(stats.get([0, 5]))
    };

    // Create a feature with these properties and add it to the global collection
    var feature = ee.Feature(null, properties);
    bootstrapF1 = bootstrapF1.merge(ee.FeatureCollection([feature]));
    
    var medianAndVariance = {
        'median': ee.Number(stats.get([0, 0])),
        'sampleVariance': ee.Number(stats.get([0, 6]))
    };

    
    return medianAndVariance; 
}

function buildGeometryList(samples, limit) {
  return samples.toList(limit).map(function(feature) {
    var featureGeometry = ee.Feature(feature).geometry();
    return featureGeometry;
  });
}

function createMapLayerCheckbox(label, map1LayerIndex, map2LayerIndex) {
  return ui.Checkbox({
    label: label ,
    style: textStyle,
    value: true,
    onChange: function(checked) {
      valPan.map1.layers().get(map1LayerIndex).setShown(checked);
      valPan.map2.layers().get(map2LayerIndex).setShown(checked);
    }
  });
}

function createDrawingToolLayerCheckbox(label, drawingToolLayerIndex) {
  return ui.Checkbox({
    label: label,
    value: true,
    style: textStyle,
    onChange: function(checked) {
      valMap1DrawingTools.layers().get(drawingToolLayerIndex).setShown(checked);
      valMap2DrawingTools.layers().get(drawingToolLayerIndex).setShown(checked);
    }
  });
}

function createAndSetClassifiedGeometryLayers(samples, layerNamePrefix, drawingToolLayerIndex) {
  // Filter for flooded (actualClass = 1) and non-flooded (actualClass = 0) samples
  var floodedSamples = samples.filter(ee.Filter.eq('actualClass', 1));
  var nonFloodedSamples = samples.filter(ee.Filter.eq('actualClass', 0));

  // Build geometry lists for each class
  var floodedGeometries = buildGeometryList(floodedSamples, 1000);
  var nonFloodedGeometries = buildGeometryList(nonFloodedSamples, 1000);

  // Function to create a geometry layer
  function createGeometryLayer(geometriesList, color, layerName) {
    return ui.Map.GeometryLayer({
      geometries: geometriesList,
      name: layerName,
      color: color,
      shown: true,
      locked: true,
    });
  }

  // Evaluate and set the layers for flooded and non-flooded samples
  floodedGeometries.evaluate(function(geometriesList) {
    var floodedLayer1 = createGeometryLayer(geometriesList, 'blue', layerNamePrefix + ' Flooded 1');
    var floodedLayer2 = createGeometryLayer(geometriesList, 'blue', layerNamePrefix + ' Flooded 2');
    valMap1DrawingTools.layers().set(drawingToolLayerIndex, floodedLayer1);
    valMap2DrawingTools.layers().set(drawingToolLayerIndex, floodedLayer2);
  });

  nonFloodedGeometries.evaluate(function(geometriesList) {
    var nonFloodedLayer1 = createGeometryLayer(geometriesList, 'green', layerNamePrefix + ' NonFlooded 1');
    var nonFloodedLayer2 = createGeometryLayer(geometriesList, 'green', layerNamePrefix + ' NonFlooded 2');
    valMap1DrawingTools.layers().set(drawingToolLayerIndex + 1, nonFloodedLayer1);
    valMap2DrawingTools.layers().set(drawingToolLayerIndex + 1, nonFloodedLayer2);
  });
}

function computeBootstrappedValidationMetrics() {
  displayMessage('Validation computing, please wait ...', 'white');
    var numBootstraps = parseInt(numBootstrapsInput.getValue(), 10);
    var samplePercentage = samplePercentageSlider.getValue();
    var selectedAllocation = sampleAllocationSelector.getValue();


 
    
   // plotSampleNumbers(validationCollection);
    var dateList = validationCollection.aggregate_array('dateString');
    
    /*
    valMap1DrawingTools.layers().reset();
    valMap2DrawingTools.layers().reset();
        
    while (valPan.map1.layers().length() > currentLayerIndex) {
        valPan.map1.layers().remove(valPan.map1.layers().get(currentLayerIndex));
        valPan.map2.layers().remove(valPan.map2.layers().get(currentLayerIndex));
    }
    
    valLegendPanel.widgets().reset();

    currentLayerIndex = 4;
  
    


valMap2DrawingTools.layers().add(ui.Map.GeometryLayer({geometries: [],name: 'Dummy Layer', shown: false, }));
valMap2DrawingTools.layers().add(ui.Map.GeometryLayer({geometries: [],name: 'Dummy Layer', shown: false, }));


var drawingToolLayerIndex = 1;
  
    */
          
    dateList.evaluate(function(dates) {
        dates.forEach(function(date) {
            var propSamples = applyProportionalStratifiedSamplingToDate(date);
            var eqSamples = applyEqualStratifiedSamplingToDate(date);
            
            print('propSamples for'+ date, propSamples);
            print('eqSamples for'+ date, eqSamples);
            
            /*
            if (selectedAllocation === 'prop') {
              createAndSetClassifiedGeometryLayers(propSamples, 'Prop Samples for: '+ date, drawingToolLayerIndex);
            } else if (selectedAllocation === 'eq') {
          
              createAndSetClassifiedGeometryLayers(eqSamples, 'Eq Samples for: '+date, drawingToolLayerIndex);
            }
           
            var filteredCollection = validationCollection.filter(ee.Filter.eq('dateString', date));
            var image = filteredCollection.first();
             */
            // Compute bootstrapped accuracy
             
            // Compute overall accuracy
            var errorMatrixEq = eqSamples.errorMatrix('actualClass', 'predictedClass');
            var errorMatrixProp = propSamples.errorMatrix('actualClass', 'predictedClass');
            /*
            var validationAccuracyBootstrapped = computeBootstrapAccuracy(propSamples, numBootstraps, samplePercentage, date);
            var validationAccuracy = errorMatrix.accuracy();
            
           // Compute bootstrapped accuracy
            var validationF1Bootstrapped = computeBootstrapF1(eqSamples, numBootstraps, samplePercentage, date);
            var validatioF1 = errorMatrix.fscore();
            */
            
            validationResults[date] = {
                accuracy: errorMatrixEq.accuracy(),
                accuracyBootstrapped: computeBootstrapAccuracy(propSamples, numBootstraps, samplePercentage, date),
                f1: errorMatrixProp.fscore(),
                f1Bootstrapped: computeBootstrapF1(eqSamples, numBootstraps, samplePercentage, date)
            };

            // Add Layers
          
            /*
            var predictedLayer = ui.Map.Layer(image.select('predictedClass'), {min: 0, max: 1, palette: ['SeaGreen', 'RoyalBlue']}, 'predicted - ' + date);
            var errorLayer = ui.Map.Layer(image.select('error'), {min: 0, max: 3, palette: ['green', 'blue', 'violet', 'purple']}, 'error - ' + date);

            valPan.map1.layers().set(currentLayerIndex, predictedLayer);
            valPan.map2.layers().set(currentLayerIndex, errorLayer);
            
            var mapLayerCheckbox = createMapLayerCheckbox( 'Map', currentLayerIndex, currentLayerIndex);
            var fDrawingToolLayerCheckbox = createDrawingToolLayerCheckbox('f samples', drawingToolLayerIndex);
            var nfDrawingToolLayerCheckbox = createDrawingToolLayerCheckbox('nf samples', drawingToolLayerIndex +1);
            
            var mapCheckboxPanel = ui.Panel({widgets: [fDrawingToolLayerCheckbox, nfDrawingToolLayerCheckbox],style: invisPanelStyle, layout: ui.Panel.Layout.flow('horizontal')});
             var geometryCheckboxPanel = ui.Panel({widgets: [ui.Label(date,textStyle), mapLayerCheckbox],style: invisPanelStyle, layout: ui.Panel.Layout.flow('horizontal')});
            valLegendPanel.add(ui.Panel({widgets: [mapCheckboxPanel,geometryCheckboxPanel ], style:invisPanelStyle}));
   
   

            
           
          currentLayerIndex ++;
          drawingToolLayerIndex++;
          drawingToolLayerIndex++;
          */
        });

        
        print('Validation Collection with Strata Weights: ', validationCollection);
        print('Bootstrap Accuracy:', bootstrapAccuracy);
        print('Bootstrap F1:', bootstrapF1);
        
         bootstrapAccuracy.evaluate(function(success) {
          displayMessage('Validation complete!', 'green');
        }, function(error) {
          displayMessage('Validation failed: ' + error, 'Coral');
        });
         
    });
}

function formatDate(date) {
   
  var year = ee.Date(date).get('year').format();
  var month = ee.Date(date).get('month').subtract(1).format();
  var day = ee.Date(date).get('day').format();
  return ee.String('Date(')
    .cat(year)
    .cat(', ')
    .cat(month)
    .cat(', ')
    .cat(day)
    .cat(ee.String(', 1)'));
}

function plotBoxPlot(FeatureCollection, title, yAxisLabel, chart, panelContainer) {
  print(FeatureCollection);
  displayMessage('Plotting' +title+', please wait ...', 'white');

  var values =  FeatureCollection.filter(ee.Filter.notNull(
  ['median', 'min', 'max', 'p25', 'p50', 'p75']));
  
   var dateList = values.aggregate_array('date');
 
var rowList = dateList.map(function(date) {
  var f = values.filter(ee.Filter.eq('date', date)).first();
  var x = formatDate(date);
  var median = f.get('median');
  var min = f.get('min');
  var max = f.get('max');
  var p25 = f.get('p25');
  var p50 = f.get('p50');
  var p75 = f.get('p75');
  var rowDict = {
    c: [{v: x}, {v: median}, {v: min}, {v: max},
        {v: p25}, {v: p50}, {v: p75}]
  };
  return rowDict;
});


rowList.evaluate(function(rowListClient) {
  var dataTable = {
    cols: [
      {id: 'x', type: 'date'},
      {id: 'median', type: 'number'},
      {id: 'min', type: 'number', role: 'interval'},
      {id: 'max', type: 'number', role: 'interval'},
      {id: 'firstQuartile', type: 'number', role: 'interval'},
      {id: 'median', type: 'number', role: 'interval'},
      {id: 'thirdQuartile', type:'number', role: 'interval'}
    ],
    rows: rowListClient
  };

  var options = {
    title: title,
     backgroundColor: 'transparent',
    vAxis: {
      title: yAxisLabel,
      gridlines: {
        color: '#d9d9d9'
      },
      minorGridlines: {
        color: 'transparent'
      },
    },
    hAxis: {
      title: '',
      format: 'YYYY-MMM',
      gridlines: {
        color: '#d9d9d9'
      },
      minorGridlines: {
        color: 'transparent'
      }
    },
    legend: {position: 'none'},
    lineWidth: 0,
    series: [{'color': '#D3362D'}],
    interpolateNulls: true,
    intervals: {
      barWidth: 0.25,
      boxWidth: 0.5,
      lineWidth: 2,
      style: 'boxes'
    },
    interval: {
      min: {
        style: 'bars',
        fillOpacity: 1,
        color: '#777777'
      },
      max: {
        style: 'bars',
        fillOpacity: 1,
        color: '#777777'
      }
    },
    chartArea: {left:100, right:100},
    height: '500px'
  };
    print(title+ ': ', dataTable);
  
  if (!chart) {
      // If the chart doesn't exist, create it
      chart = ui.Chart(dataTable)
        .setChartType('LineChart')
        .setOptions(options);
      // Add the chart to a UI panel here if needed
      panelContainer.add(chart);
    } else {
      // If the chart exists, update its data
      chart.setDataTable(dataTable);
    }
   rowList.evaluate(function(success) {
    displayMessage('Plottin' + title + ' complete!', 'green');
  }, function(error) {
    displayMessage('Plot failed: ' + error, 'Coral');
  });
    
  });
  
 
}

function createConfusionMatrixPanel(dateString, testingErrorMatrix, palette) {
  // Define styles
  var headerStyle = {
    width: '33%',
    textAlign: 'center',
    padding: '5px',
    color: fontColor, // Assuming fontColor is a global variable
    backgroundColor: 'rgba(0, 0, 0, 0)', // Transparent background
    border: '1px solid black',
    margin: '0px',
    stretch: 'both'
  };

  var valueStyle = {
    width: '33%',
    textAlign: 'center',
    color: 'white',
    fontWeight: 'bold',
    padding: 'auto 5px',
    backgroundColor: 'rgba(0, 0, 0, 0)', // Transparent background
    border: '1px solid black',
    margin: '0px',
    stretch: 'both'
  };

  // Create a panel to hold the table
  var tablePanel = ui.Panel({
    style: {
      padding: '0',
      margin: 'auto',
      backgroundColor: 'rgba(0, 0, 0, 0)' // Transparent background
    }
  });

  // First row (headers)
  var row1 = ui.Panel([
    ui.Label(dateString, headerStyle),
    ui.Label('Actual Non Flood', headerStyle),
    ui.Label('Actual Flood', headerStyle)
  ], ui.Panel.Layout.Flow('horizontal'), { height: '33%'});

  tablePanel.add(row1);

  // Evaluate the testingErrorMatrix and build the rest of the panel
  testingErrorMatrix.evaluate(function(matrix) {
    // Create labels for the second and third row
    var valueLabels = [
      ui.Label(matrix[0][0].toString(), valueStyle),
      ui.Label(matrix[0][1].toString(), valueStyle),
      ui.Label(matrix[1][0].toString(), valueStyle),
      ui.Label(matrix[1][1].toString(), valueStyle)
    ];

    // Set background colors manually
    valueLabels[0].style().set('backgroundColor', palette[0]);
    valueLabels[1].style().set('backgroundColor', palette[1]);
    valueLabels[2].style().set('backgroundColor', palette[2]);
    valueLabels[3].style().set('backgroundColor', palette[3]);

    // Second row
    var row2 = ui.Panel([
      ui.Label('Predicted Non Flood', headerStyle),
      valueLabels[0],
      valueLabels[1]
    ], ui.Panel.Layout.Flow('horizontal'), { height: '33%'});

    // Third row
    var row3 = ui.Panel([
      ui.Label('Predicted Flood', headerStyle),
      valueLabels[2],
      valueLabels[3]
    ], ui.Panel.Layout.Flow('horizontal'), { height: '33%'});

    tablePanel.add(row2);
    tablePanel.add(row3);
  });

  return tablePanel;
}

function plotTestingAccuracyMatrix(imageCollection) {
  var palette = ['green', 'purple', 'violet', 'blue'];

  var matrixContainerPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal'),
  style: { backgroundColor: 'rgba(0, 0, 0, 0)' }
    });
    
  imageCollection.evaluate(function (images) {
    images.features.forEach(function (feature) {
      var dateString = feature.properties.dateString;
      var testingErrorMatrix = ee.Array(feature.properties.testing.errorMatrix);
      var confusionMatrixPanel = createConfusionMatrixPanel(dateString, testingErrorMatrix, palette);
      matrixContainerPanel.add(confusionMatrixPanel);
    
    });
  });
  
    testingErrorMatrixPanel.clear();
    testingErrorMatrixPanel.add(ui.Label('Testing Confusion Matrices', headerStyle));
    testingErrorMatrixPanel.add(matrixContainerPanel);
    
}

function plotTestingMetrics(validationCollection) {
  var rows = [];

  validationCollection.evaluate(function(col) {
    col.features.forEach(function(feature) {
      var props = feature.properties;
      var date = feature.properties.dateString;
      
      var errorMatrix = props.testing.errorMatrix;

      // Extract the components of the confusion matrix as standard array elements
      var TP = errorMatrix[1][1];
      var TN = errorMatrix[0][0];
      var FP = errorMatrix[0][1];
      var FN = errorMatrix[1][0];

      // Manually calculate Recall, Precision, and F1 Score
      var recall = TP / (TP + FN);
      var precision = TP / (TP + FP);
      var f1Score = 2 * (precision * recall) / (precision + recall);

      var nEqF = props.testing.nEq.f;
      var nEqNF = props.testing.nEq.nf;
      var accuracy = (TP + TN) / (TP + TN + FP + FN);
      var outOfBagErrorEstimate = props.testing.outOfBagErrorEstimate;

      rows.push([date, nEqF, nEqNF, outOfBagErrorEstimate, accuracy, recall, precision, f1Score]);
    });

    // Create the data table
    var dataTable = [['Date', 'nEq.f', 'nEq.nf', 'OutOfBagError', 'Accuracy', 'Recall', 'Precision', 'F1 Score']].concat(rows);

    // Initialize the chart or update it if it already exists
    if (!testingMetricsTable) {
      testingMetricsTable = ui.Chart(dataTable)
        .setChartType('Table')
        .setOptions({title: ''});
      // Add the chart to a UI panel here if needed
      testingTablePanel.add(ui.Label('Testing Metrics', headerStyle));
      testingTablePanel.add(testingMetricsTable);
    } else {
      testingMetricsTable.setDataTable(dataTable);
    }
  });
  
}

function plotPixelByPixelErrorMatrices(imageCollection) {
   var palette = ['green', 'purple', 'violet', 'blue'];

  var matrixContainerPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal'),
  style: { backgroundColor: 'rgba(0, 0, 0, 0)', stretch: 'horizontal' }
    });
    
    pxByPxErrorMatrixPanel.clear();
    pxByPxErrorMatrixPanel.add(ui.Label('Pixel-by-Pixel Confusion Matrices', headerStyle));
    pxByPxErrorMatrixPanel.add(matrixContainerPanel);
    
    
  imageCollection.evaluate(function (images) {
    images.features.forEach(function (feature) {
      var dateString = feature.properties.dateString;
      var pxByPxErrorMatrix = ee.Array(feature.properties.pxByPx.errorMatrix);
      print('pxByPxErrorMatrix',pxByPxErrorMatrix);
      var confusionMatrixPanel = createConfusionMatrixPanel(dateString, pxByPxErrorMatrix, palette);
      matrixContainerPanel.add(confusionMatrixPanel);
      
      
       
    });
  });
}

function plotPixelByPixelMetrics(validationCollection) {
  var rows = [];

  validationCollection.evaluate(function(col) {
    col.features.forEach(function(feature) {
      var props = feature.properties;
      var date = props.dateString;
      
      var errorMatrix = props.pxByPx.errorMatrix;

      // Extract the components of the confusion matrix as standard array elements
      var TP = errorMatrix[1][1];
      var TN = errorMatrix[0][0];
      var FP = errorMatrix[0][1];
      var FN = errorMatrix[1][0];

      // Manually calculate Recall, Precision, and F1 Score
      var recall = TP / (TP + FN);
      var precision = TP / (TP + FP);
      var f1Score = 2 * (precision * recall) / (precision + recall);
      var accuracy = (TP + TN) / (TP + TN + FP + FN);

      //var nEqF = props.testing.nEq.f;
      //var nEqNF = props.testing.nEq.nf;
      
      var outOfBagErrorEstimate = props.testing.outOfBagErrorEstimate;

      rows.push([date,  accuracy, recall, precision, f1Score]);
    });

    // Create the data table
    var dataTable = [['Date', 'Accuracy', 'Recall', 'Precision', 'F1 Score']].concat(rows);

    // Initialize the chart or update it if it already exists
    if (!pxByPxMetricsTable) {
      pxByPxMetricsTable = ui.Chart(dataTable)
        .setChartType('Table')
        .setOptions({title: ''});
      // Add the chart to a UI panel here if needed
      pxByPxTablePanel.add(ui.Label('Pixel-by-Pixel Metrics', headerStyle));
      pxByPxTablePanel.add(pxByPxMetricsTable);
    } else {
      pxByPxMetricsTable.setDataTable(dataTable);
    }
  });
  
}


function createRowList(validationCollection, callback) {
    validationCollection.map(function(image) {
        var props = image.properties;
        var dateString = props.dateString;
        var pxByPx = props.pxByPx;
        var errorMatrix = ee.List(pxByPx.errorMatrix);
        var actualFlooded = ee.Number(pxByPx.actualFlooded);

        // Extract error matrix components
        var TP = ee.Number(errorMatrix.get(0)).get([0]);
        var FP = ee.Number(errorMatrix.get(0)).get([1]);
        var FN = ee.Number(errorMatrix.get(1)).get([0]);
        var TN = ee.Number(errorMatrix.get(1)).get([1]);

        // Calculate proportionate errors
        var TP_proportion = TP.divide(actualFlooded);
        var FP_proportion = FP.divide(actualFlooded);
        var FN_proportion = FN.divide(actualFlooded);
        var TN_proportion = TN.divide(actualFlooded);

        // Create a row dictionary for this date
        return ee.Feature(null, {
            dateString: dateString,
            TP_proportion: TP_proportion,
            FP_proportion: FP_proportion,
            FN_proportion: FN_proportion,
            TN_proportion: TN_proportion
        });
    }).evaluate(function(collection) {
        var rowList = collection.map(function(feature) {
            var props = feature.properties;
            return {
                c: [
                    {v: props.dateString}, 
                    {v: props.TP_proportion}, {v: props.TP_proportion.toFixed(2)}, 
                    {v: props.FP_proportion}, {v: props.FP_proportion.toFixed(2)}, 
                    {v: props.FN_proportion}, {v: props.FN_proportion.toFixed(2)},
                    {v: props.TN_proportion}, {v: props.TN_proportion.toFixed(2)}
                ]
            };
        });
        callback(rowList);
    });
}


function plotBootstrappedAccuracyMetrics(validationCollection) {

    
  var rows = [];

  validationCollection.evaluate(function(col) {
    col.features.forEach(function(feature) {
      
      var date = feature.properties.dateString;
      
      var nEqF = feature.properties.nEq.f;
      var nEqNF = feature.properties.nEq.nf;
      var validationAccuracy = ee.Number(validationResults[date].accuracy).getInfo();
     var validationAccuracyBootstrapped = ee.Number(validationResults[date].accuracyBootstrapped.median).getInfo();
     var validationAccuracyBootstrappedVariance = ee.Number(validationResults[date].accuracyBootstrapped.sampleVariance).getInfo();
     
     print('nEqF',nEqF);
     print('nEqNF',nEqNF);
    print('validationAccuracy',validationAccuracy);
    print('validationAccuracyBootstrapped',validationAccuracyBootstrapped);
    
      rows.push([date,  nEqF, nEqNF, validationAccuracy, validationAccuracyBootstrapped, validationAccuracyBootstrappedVariance]);
    });

    // Create the data table
    var dataTable = [['Date', 'nEq.f', 'nEq.nf', 'OA (no boot)', 'OA.median (boot)', 'OA.variance (boot)' ]].concat(rows);

    // Initialize the chart or update it if it already exists
    if (!bootstrappedAccuracyTable) {
      bootstrappedAccuracyTable = ui.Chart(dataTable)
        .setChartType('Table')
        .setOptions({title: ''});
      // Add the chart to a UI panel here if needed
      accuracyPanel.add(ui.Label('Bootstrapped Accuracy', headerStyle));
      accuracyPanel.add(bootstrappedAccuracyTable);
    } else {
      bootstrappedAccuracyTable.setDataTable(dataTable);
    }
  });
  
}

function plotBootstrappedF1Metrics(validationCollection) {

    
  var rows = [];

  validationCollection.evaluate(function(col) {
    col.features.forEach(function(feature) {
      
      var date = feature.properties.dateString;
      
      var nEqF = feature.properties.nProp.f;
      var nEqNF = feature.properties.nProp.nf;
      var validationF1 = ee.Number(validationResults[date].f1.get([1])).getInfo();
      
      print('validationF1',validationF1);
     var validationF1Bootstrapped = ee.Number(validationResults[date].f1Bootstrapped.median).getInfo();
     var validationF1BootstrappedVariance = ee.Number(validationResults[date].f1Bootstrapped.sampleVariance).getInfo();
     
      rows.push([date,  nEqF, nEqNF, validationF1, validationF1Bootstrapped, validationF1BootstrappedVariance]);
    });

    // Create the data table
    var dataTable = [['Date', 'nProp.f', 'nProp.nf', 'F1 (no boot)', 'F1.median (boot)', 'F1.variance (boot)' ]].concat(rows);

    // Initialize the chart or update it if it already exists
    if (!bootstrappedF1Table) {
      bootstrappedF1Table = ui.Chart(dataTable)
        .setChartType('Table')
        .setOptions({title: ''});
      // Add the chart to a UI panel here if needed
      f1Panel.add(ui.Label('Bootstrapped F1-Score', headerStyle));
      f1Panel.add(bootstrappedF1Table);
    } else {
      bootstrappedF1Table.setDataTable(dataTable);
    }
  });
  
}



//=================================================
//UI
//=================================================
var validationCollection; 

var validationResults = {};
var bootstrapAccuracy = ee.FeatureCollection([]);
var bootstrapF1 = ee.FeatureCollection([]);
var currentGeometryLayerName = null;
var sampleNumbersChart = null;
var testingMetricsTable = null;
var pxByPxMetricsTable = null;
var propErrorChart = null;
var bootstrappedAccuracyChart = null;
var bootstrappedAccuracyTable = null;
var bootstrappedF1Table = null;

var bootstrappedF1Chart = null;
var currentLayerIndex = 4; // Starting index for adding layers

valPan.map1.setControlVisibility({all: false});
var valMap1DrawingTools = valPan.map1.drawingTools();
var valMap2DrawingTools = valPan.map2.drawingTools();

valPan.legend.add(ui.Label('Validation Error Layers', smallHeaderStyle));
addStaticLegendEntry(valPan.legend, 'predicted to be nonflooded ', 'colorbox', 'LightGreen');
addStaticLegendEntry(valPan.legend, 'predicted to be flooded ', 'colorbox', 'LightBlue');
addStaticLegendEntry(valPan.legend, 'nonflooded predicted to be nonflooded ', 'colorbox', 'green');
addStaticLegendEntry(valPan.legend, 'flooded predicted to be flooded ', 'colorbox', 'blue');
addStaticLegendEntry(valPan.legend, 'nonflooded predicted to be flooded', 'colorbox', 'violet');
addStaticLegendEntry(valPan.legend, 'flooded predicted to be nonflooded', 'colorbox', 'purple');

var pxByPxScaleSlider = ui.Slider({
  min: 10,
  max: 500,
  value: 10, // Default value
  step: 10,
  style: sliderStyle
});

var nTotInput = ui.Textbox({
    placeholder: 'enter nTot',
    style: textStyle
});
var overrideCheckbox = ui.Checkbox({
    label: 'Override Calculated Sample Size',
    value: false,
    style: {backgroundColor: panelBackgroundColor, margin: 'auto 5px'}
});
var overridePanel = ui.Panel({widgets: [overrideCheckbox, nTotInput], style: invisPanelStyle, layout: ui.Panel.Layout.flow('horizontal')});

var sampleAllocationSelector = ui.Select({
  items: [
    { label: 'Strata Weight Proportional Allocated Samples', value: 'prop' },
    { label: 'Equally Allocated Samples', value: 'eq' }
  ],
  placeholder: 'Choose sample by allocation',
  value: 'eq', 
  onChange: function(value) {
    // You can handle change event if necessary
  }
});




var numBootstrapsInput = ui.Textbox({placeholder: 'Enter number of bootstraps', value: '100', style: textStyle});
var numBootstrapsPanel = ui.Panel({widgets:[ui.Label('number of bootstrap runs', textStyle), numBootstrapsInput], layout: ui.Panel.Layout.flow('horizontal'), style: invisPanelStyle});

var samplePercentageSlider = ui.Slider({min: 0, max: 1, value: 0.8, step: 0.01, style: sliderStyle});
var valComputeButton = ui.Button({label: 'Compute Validation Metrics', disabled: false, style: buttonStyle});

valComputeButton.onClick( function() {  
  computeBootstrappedValidationMetrics();
});
var testPlotButton = ui.Button({label: 'Plot Testing Metrics', disabled: false, style: buttonStyle});
testPlotButton.onClick( function() {
     validationCollection = getValidationCollection(groundTruthCollection, postProcessedCollection);
    validationCollection = calcSampleNum(validationCollection);
    
  var colorPalette = ['#FFFFFF', '#FF0000', '#00FF00', '#0000FF']; // Define your color palette here

plotTestingAccuracyMatrix(validationCollection, colorPalette);

plotTestingMetrics(validationCollection);

print('Validation Collection with Testing Metrics: ', validationCollection);



var exportIteration = 1; // Set your export iteration number here

// Function to export an image by date and band to Google Drive
function exportImageByDateAndBand(imageCollection, date, band, aoi, iteration) {
  var imageToExport = imageCollection
    .filter(ee.Filter.eq('dateString', date))
    .first()  // Get the first image matching the date
    .select(band); // Select the specified band

  var fileName = date.replace(/-/g, '') + '_' + 'aoiSub' + iteration + '_' + band; // Construct the file name

  Export.image.toDrive({
    image: imageToExport,
    description: fileName,
    folder: 'GEE_Export_Results',
    fileNamePrefix: fileName,
    region: aoi.geometry(),
    scale: 30, // Set the scale if known, or determine an appropriate scale for your dataset
    maxPixels: 1e9
  });
}

// Export bands for the image with dateString '2021-03-19'
var bands = postProcessedCollection.first().bandNames().getInfo(); // Get band names from the collection
bands.forEach(function(band) {
  exportImageByDateAndBand(postProcessedCollection, '2021-03-19', band, aoiSub2FC, exportIteration);
});

// Export bands for the image with dateString '2021-03-24'
bands.forEach(function(band) {
  exportImageByDateAndBand(postProcessedCollection, '2021-03-24', band, aoiSub3FC, exportIteration);
});


}); 

var pxByPxPlotButton = ui.Button({label: 'Plot Pixel by Pixel Metrics', disabled: false, style: buttonStyle});
pxByPxPlotButton.onClick( function() {
  
plotPixelByPixelErrorMatrices(validationCollection);
plotPixelByPixelMetrics(validationCollection);
plotTestingMetrics(validationCollection);

 print('Validation Collection with px by px : ', validationCollection);
}); 

var valPlotButton = ui.Button({label: 'Plot Validation Metrics', disabled: false, style: buttonStyle});

var valButtonPanel = ui.Panel({widgets:[valComputeButton, valPlotButton], layout: ui.Panel.Layout.flow('horizontal'), style: invisPanelStyle});

valPlotButton.onClick( function() {
  
//plotProportionalError(validationCollection, 'Proportionate Errors', propErrorChart, pxByPxTablePanel)

plotBootstrappedAccuracyMetrics(validationCollection);
plotBoxPlot(bootstrapAccuracy, 'Bootstrapped Overall Accuracy (proportional sampling) ', 'Accuracy', bootstrappedAccuracyChart, accuracyPanel);
 print('Bootstrap Accuracy:', bootstrapAccuracy);
 
plotBootstrappedF1Metrics(validationCollection); 
plotBoxPlot(bootstrapF1, 'Bootstrapped F1-Score (equal sampling)', 'F1', bootstrappedF1Chart, f1Panel);

print('validationResults',validationResults);

});


var performanceInput = ui.Panel({
    widgets: [
        ui.Label('Performance Assessment', bigHeaderStyle),
        ui.Label(seperatorContent),
          testPlotButton,
           ui.Label(seperatorContent),
        ui.Label('Pixel-by-Pixel', headerStyle),
        ui.Label('Performance Parameters are calculated on a pixel-by-pixel basis at a the specified scale. Upping the scale reduces computation time.', textStyle),
        ui.Label('Reduction Scale', textStyle),
        pxByPxScaleSlider,
          pxByPxPlotButton,
        ui.Label(seperatorContent),
        ui.Label('Validation Sampling Design', headerStyle),
        ui.Label('Stratefied Random Sampling is performed. The sample size (nTot) is statistically estimated based on previous testing metrics and strata weights. The calculated sample size estimation can be manualy overwritten.', textStyle),
        overridePanel,
        ui.Label('Allocation of sample size per stratum is done both, equaly (nEq) for the caluclation of class specific metrics (eg. F1) and proportional to the strata weight (nProp) for the calculation of global metrics (eg. OA). Both are computed, due to need conversion to the userside, decide on one sample for display.', textStyle),
        sampleAllocationSelector, 
        ui.Label(seperatorContent),
        ui.Label('Validation Bootstrapping', headerStyle),
        numBootstrapsPanel,
        ui.Label('Sample Percentage:', textStyle),
        samplePercentageSlider,
        ui.Label(seperatorContent),
        valButtonPanel,
        ui.Label(seperatorContent),
      
      
    ],
    style: panelStyle
});

valPan.left.add(performanceInput);



var testingErrorMatrixPanel = ui.Panel({widgets: [], style:panelStyle});
var testingTablePanel = ui.Panel({widgets: [], style: panelStyle});


var pxByPxTablePanel = ui.Panel({widgets: [], style: invisPanelStyle});


var pxByPxErrorMatrixPanel = ui.Panel({widgets: [], style:panelStyle});

var accuracyPanel = ui.Panel({widgets: [], style:panelStyle});
var f1Panel = ui.Panel({widgets: [], style:panelStyle});
var validationChartPanel = ui.Panel({widgets: [accuracyPanel, f1Panel], style: panelStyle, layout: ui.Panel.Layout.flow('horizontal')});

var performanceChartPanel = ui.Panel({
    widgets: [
        ui.Label('Testing', bigHeaderStyle),
        testingErrorMatrixPanel,
        testingTablePanel,
        ui.Label(seperatorContent),
        ui.Label('Pixel-by-Pixel', bigHeaderStyle),
        pxByPxErrorMatrixPanel,
        pxByPxTablePanel,
        ui.Label(seperatorContent),
        ui.Label('Validation', bigHeaderStyle),
        validationChartPanel,
        ui.Label(seperatorContent),
    ],
    style: panelStyle
});

valPan.right.add(performanceChartPanel);





var valLegendPanel = ui.Panel({widgets:[],style: invisPanelStyle} ); 
valPan.legend.add(valLegendPanel);


createMenuButton('Validation', valPan.left, valPan.middle, valPan.right );

/***********************************************************************
 *                             Animation                               *
 ***********************************************************************/
function daysBetween(startDate, endDate) {
  var oneDay = 86400000; // 24 * 60 * 60 * 1000
  return Math.round(Math.abs((startDate.getTime() - endDate.getTime()) / oneDay));
}

var animationLayers = [];
var animationMessageLabel = ui.Label('load first', {backgroundColor: panelBackgroundColor, color: fontColor, margin: 'auto'});
var startDateLabel = ui.Label('Start Date', {width: '15%', backgroundColor: panelBackgroundColor, color: fontColor, margin: 'auto ', padding: ' 5px'});
var endDateLabel = ui.Label('End Date', {width: '15%', backgroundColor: panelBackgroundColor, color: fontColor, margin: 'auto ',  padding: ' 5px'});
var animationSlider = ui.Slider({min: 0, max: 1, step: 1, style: {width: '70%' , stretch: 'horizontal', backgroundColor: panelBackgroundColor, color: fontColor, margin: 'auto'}});

function formatDateToDayMonth(date) {
  return date.getDate() + '/' + (date.getMonth() + 1);
}

function loadAnimationLayers() {
  print('clicked');
  animationLayers.forEach(function(layer) { resultMap.remove(layer); });
  animationLayers = [];
  var dates = postProcessedCollection.aggregate_array('dateString');
  dates.evaluate(function(dateStrings, error) {
    if (error) {
      animationMessageLabel.setValue('Error loading dates: ' + error);
      return;
    }
    if (dateStrings.length === 0) {
      animationMessageLabel.setValue('No dates available in the collection.');
      return;
    }
    var loadDelay = dateStrings.length * 2000;
    dateStrings.forEach(function(dateString) {
      var filteredCollection = postProcessedCollection.filter(ee.Filter.eq('dateString', dateString));
      var image = ee.Image(filteredCollection.first());
      image.bandNames().evaluate(function(bands, error) {
        if (error || !bands || bands.length === 0) {
          animationMessageLabel.setValue('Error: Image for ' + dateString + ' has no bands.');
          return;
        }
        var layerName = 'AnimationLayer ' + dateString;
        var layer = ui.Map.Layer(image, visParams.classified, layerName, true, 0);
        resultMap.add(layer);
        animationLayers.push(layer);
      });
    });
    ui.util.setTimeout(function() { animationMessageLabel.setValue('All images loaded.'); }, loadDelay);
  });
  animationMessageLabel.setValue('Loading images...');
  var dateRange = postProcessedCollection.reduceColumns(ee.Reducer.minMax(), ['dateString']);
  dateRange.evaluate(function(range) {
    if (range) {
      var startDate = new Date(range.min);
      var endDate = new Date(range.max);
      var totalDays = daysBetween(startDate, endDate);
      animationSlider.setMin(0);
      animationSlider.setMax(totalDays);
      animationSlider.setStep(1);
      startDateLabel.setValue(formatDateToDayMonth(new Date(range.min)));
      endDateLabel.setValue(formatDateToDayMonth(new Date(range.max)));
    }
  });
}

function removeAnimationLayers() {
  animationLayers.forEach(function(layer) { resultMap.remove(layer); });
  animationLayers = [];
  animationMessageLabel.setValue('Animation layers removed.');
}

function createControlPanel() {
  var panelStyle = {width: '100%', backgroundColor: panelBackgroundColor};
  var panel = ui.Panel({style: panelStyle});
  var header = ui.Label('Flood Extend Animation', smallHeaderStyle);
  panel.add(header);
  var loadButton = ui.Button({label: '+', onClick: loadAnimationLayers, style: { margin: 'auto'}});
  var removeButton = ui.Button({label: '🗑', onClick: removeAnimationLayers, style: { margin: 'auto'}});
  var loadPanel = ui.Panel([loadButton, removeButton], ui.Panel.Layout.Flow('horizontal'), {backgroundColor: panelBackgroundColor, margin: 'auto'});
  var startButton = ui.Button('▶️️', startAnimation); 
  var stopButton = ui.Button('⏹️', stopAnimation);
  var controlPanel = ui.Panel([startButton, stopButton], ui.Panel.Layout.Flow('horizontal'), {backgroundColor: panelBackgroundColor, color: fontColor, margin: 'auto'});
  var sliderPanel = ui.Panel([startDateLabel, animationSlider, endDateLabel], ui.Panel.Layout.Flow('horizontal'), {width: '90%', backgroundColor: panelBackgroundColor, color: fontColor, margin: 'auto'});
  panel.add(loadPanel);
  loadPanel.add(controlPanel);
  panel.add(animationMessageLabel);
  panel.add(sliderPanel); 
 
}

function changeOpacity(layer, startOpacity, endOpacity, step) {
  var opacity = startOpacity;
  var opacityIntervalId = ui.util.setInterval(function() {
    layer.setOpacity(opacity);
    if (startOpacity < endOpacity) {
      opacity += step;
      if (opacity > endOpacity) {
        opacity = endOpacity;
        ui.util.clearTimeout(opacityIntervalId);
      }
    } else {
      opacity -= step;
      if (opacity < endOpacity) {
        opacity = endOpacity;
        ui.util.clearTimeout(opacityIntervalId);
      }
    }
  }, 300);
}

var intervalId;
function startAnimation() {
  if (animationLayers.length === 0) {
    animationMessageLabel.setValue('Error: No animation layers to display.');
    return;
  }
  animationMessageLabel.setValue('Animation started.');
  var currentImage = 0;
  var startDate = new Date(postProcessedCollection.reduceColumns(ee.Reducer.min(), ['dateString']).get('min').getInfo());
  intervalId = ui.util.setInterval(function() {
    var currentLayer = animationLayers[currentImage];
    var currentDate = new Date(currentLayer.getName().replace('AnimationLayer ', ''));
    animationMessageLabel.setValue('Showing: ' + currentDate.toDateString());
    var daysFromStart = daysBetween(startDate, currentDate);
    animationSlider.setValue(daysFromStart);
    var previousImage = (currentImage === 0) ? animationLayers.length - 1 : currentImage - 1;
    changeOpacity(animationLayers[previousImage], 1, 0, 0.1);
    changeOpacity(animationLayers[currentImage], 0, 1, 0.1);
    currentImage = (currentImage + 1) % animationLayers.length;
  }, 6000);
}

function stopAnimation() {
  ui.util.clearTimeout(intervalId);
  animationLayers.forEach(function(layer) { layer.setOpacity(0); });
  animationMessageLabel.setValue('Animation stopped.');
}





//define aoi 

//menu items


var defineAoiButton = ui.Button({
  label: 'Area of Interest',
  style: {border: '2px solid black', padding: '0', margin: '0 5px'},
  onClick: function() {
    openPopup(createAoiSelectionPanelContent());
  }
});

function createAoiSelectionPanelContent() {
  var aoiSelectionPanelContent = ui.Panel({
      style: {
          padding: '10px',
          margin: 'auto'
      }
  });

  var instructionsTitle = ui.Label({
      value: 'Area of Interest (AoI) Configuration',
      style: {
          fontWeight: 'bold',
          fontSize: '16px',
          margin: 'auto',
          color: '#1a73e8' 
      }
  });

  aoiSelectionPanelContent.add(instructionsTitle);
  
   
  var userInformationText1 = ui.Label({
      value: 'You can use your own Area of Interest (AoI) and ensure it remains persistent across sessions by importing assets.',
      style: { fontSize: '16px', margin: 'auto', padding: '10px' }
  });
  var userInformationText2 = ui.Label({
      value: 'The primary AoI should be imported as a Feature Collection for computation, while visualization is managed through Feature View layers.',
      style: { fontSize: '16px', margin: 'auto', padding: '10px' }
  });
  var userInformationText22 = ui.Label({
      value: 'Up to three additional subset areas are supported for visual representation.',
      style: { fontSize: '16px', margin: 'auto', padding: '10px' }
  });
  var userInformationText3 = ui.Label({
      value: 'Please import the needed assets via the Code Editor’s imports panel and adhere to the following naming conventions:',
      style: { fontSize: '16px', margin: 'auto', padding: '10px' }
  });
  var userInformationText4 = ui.Label({
      value: 'Top level AoI Feature Collection: aoiFC',
      style: { fontSize: '16px', margin: 'auto', padding: '10px', fontWeight: 'bold' }
  });
  var userInformationText5 = ui.Label({
      value: 'Top level AoI Feature View: aoiFV',
      style: { fontSize: '16px', margin: 'auto', padding: '10px', fontWeight: 'bold' }
  });
  var userInformationText6 = ui.Label({
      value: 'Subset 1 Feature View: aoiSub1 (and similarly for Subset 2 and 3)',
      style: { fontSize: '16px', margin: 'auto', padding: '10px', fontWeight: 'bold' }
  });



  aoiSelectionPanelContent.add(userInformationText1);
  aoiSelectionPanelContent.add(userInformationText2);
  aoiSelectionPanelContent.add(userInformationText22);
  aoiSelectionPanelContent.add(userInformationText3);
  aoiSelectionPanelContent.add(userInformationText4);
  aoiSelectionPanelContent.add(userInformationText5);
  aoiSelectionPanelContent.add(userInformationText6);

  return aoiSelectionPanelContent;
}

/***********************************************************************
 *                             Tool Buttons                            *
 ***********************************************************************/

function removeAllGeometryLayers() {
  var layers = drawingTools.layers();
  while (layers.length() > 0) {
    var layer = layers.get(0);
    layers.remove(layer);
  }
}

var removeAllGeometriesButton = ui.Button({
  label: '🗑 Geometry Imports️',
  onClick: removeAllGeometryLayers,
  style: {margin: '0', padding: '0'}
});


function centerMapOnAOI(aoiName) {
  var aoi = aoiDictionary[aoiName];
  if (aoi) {
    clasPan.map1.centerObject(aoi);
    sampPan.map1.centerObject(aoi);
    valPan.map1.centerObject(aoi);
    
  } else {
    print('AOI ' + aoiName + ' is not defined.');
  }
}



var centerButtonPanel = ui.Panel({layout: ui.Panel.Layout.flow('horizontal'), style: {padding: '0', margin: 'auto 0 auto auto', backgroundColor: 'rgba(255, 255, 255, 0)'}});
Object.keys(aoiDictionary).forEach(function(aoiName) {
  var button = ui.Button({label: ' 🔎 '+aoiName, style: { margin: 'auto 0'},onClick:function() { centerMapOnAOI(aoiName); }});
  centerButtonPanel.add(button);
});
centerButtonPanel.add(removeAllGeometriesButton);
rightMenuPanel.add(centerButtonPanel);



// Define the three buttons for different widths
var width10Button = ui.Button({
  label: ' 🔴 ',
  onClick: function() {
    updateChartPanelWidth(0);
  },
  style: {margin: '0', padding: '0'}
});

var width20Button = ui.Button({
  label: ' 🟡 ',
  onClick: function() {
    updateChartPanelWidth(20);
  },
   style: {margin: '0', padding: '0'}
});

var width80Button = ui.Button({
  label: ' 🟢 ',
  onClick: function() {
    updateChartPanelWidth(80);
  },
   style: {margin: '0', padding: '0'}
});

// Add buttons to the center button panel
centerButtonPanel.add(width10Button);
centerButtonPanel.add(width20Button);
centerButtonPanel.add(width80Button);

// Modified function to update the chart panel's width
function updateChartPanelWidth(rightWidth) {
  var middleWidth = 80 - rightWidth; // Ensure total width is 100%

  middlePanel.style().set('width', middleWidth + '%');
  rightPanel.style().set('width', rightWidth + '%');

  // Refresh the chart
  refreshChart(rightPanel);
}

// Function to refresh the chart by toggling a style attribute
function refreshChart(chart) {
    var currentChartStyle = chart.style();
    var currentVisibility = currentChartStyle.get('shown');

    // Toggle the visibility to force refresh
    chart.style().set('shown', false);
    chart.style().set('shown', true);

}




